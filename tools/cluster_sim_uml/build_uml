#!/bin/bash
#
#      -*- OpenSAF  -*-
#
# (C) Copyright 2008-2016 The OpenSAF Foundation
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. This file and program are licensed
# under the GNU Lesser General Public License Version 2.1, February 1999.
# The complete license can be accessed from the following location:
# http://opensource.org/licenses/lgpl-license.php
# See the Copying file included with the OpenSAF distribution for full
# licensing terms.
#
# Author(s): Ericsson AB
#

##
## build_uml [subcommand] [params...]
##
##   Build script for the Open SAF cluster simulation with User Mode
##   Linux (UML).  When invoked without a sub-command the rootfs is
##   built (for backward compatibility).
##
## Subcommands;
##

prg=$(basename "$0")
dir=$(dirname "$0"); dir=$(cd "$dir"; pwd)
build=${OSAF_UML_BUILD:-$dir/uml}
tmp=$(mktemp -d /tmp/"${prg}"$$.XXXXXXXXXX)
no_of_processors=$(find /sys/devices/system/cpu -name 'cpu[0-9]*' -print | wc -l)
#if [ "$no_of_processors" -le 0 ]; then
    no_of_processors=1
#fi

die() {
    echo "ERROR: $*" >&2
    rm -rf "$tmp"
    exit 1
}

##   help
##     Help printout.
##
cmd_help() {
    grep '^##' "$dir/$prg" | cut -c3-
}

# "make install" always install to /usr/local/lib no matter 32/64 bit
lib_dir=lib

opensaf_home=$(cd ../..; pwd)
top=$(pwd)
archive=$top/archive
scripts=$archive/scripts
root=$top/rootfs
build=${OSAF_UML_BUILD:-$top/uml}

appconfig=${APPCONFIG:-"${opensaf_home}/samples/amf/sa_aware/AppConfig-2N.xml"}

##   getlibs prog [prog...]
##     Return required (and found) dynamic libs for programs.
##
cmd_getlibs() {
    for n in "$@"; do
	test -x "$n" || continue
	file -L "$n" | grep -q "dynamically linked\|shared object" || continue
	ldd "$n" | grep -o '/[^ ]*' | sed -e 's,/tls,,'
    done
}

cmd_build_testprog() {
    src=$opensaf_home/samples/amf/sa_aware
    libd=$root/usr/local/$lib_dir
    installd=$root/opt/amf_demo
    immxml=$root/etc/opensaf/imm.xml

    mkdir -p "$installd"
    cp $src/amf_demo_script $installd
    gcc -g -O2 -Wall -fPIC -I$opensaf_home/src/amf/saf \
	-I$opensaf_home/src/ntf/saf \
	-I$opensaf_home/src/osaf/saf \
	-DSA_EXTENDED_NAME_SOURCE \
	-o $installd/amf_demo $src/amf_demo.c \
	-Wl,--as-needed "-Wl,-rpath-link,$libd:$libd/opensaf" "-L$libd" -lSaAmf

    echo "Creating [$root/root.cpio] ..."
    cmd_mkcpio
}

##   install_testprog
##     Build and install the AMF demo program.
##     Use environment variable APPCONFIG to name the imm.xml to be used.
##     Default is "AppConfig-2N.xml"
##     For example:
##        env APPCONFIG=AppConfig-nwayactive.xml ./build_uml install_testprog
##
cmd_install_testprog() {
    src=$opensaf_home/samples/amf/sa_aware
    libd=$root/usr/local/$lib_dir
    installd=$root/opt/amf_demo
    immxml=$root/etc/opensaf/imm.xml

    mkdir -p $installd
    cp $src/amf_demo_script $installd
    gcc -g -O2 -Wall -fPIC -I$opensaf_home/src/amf/saf \
	-I$opensaf_home/src/ntf/saf \
	-I$opensaf_home/src/ais/include \
	-I$opensaf_home/src/osaf/saf \
	-DSA_EXTENDED_NAME_SOURCE \
	-o $installd/amf_demo $src/amf_demo.c \
	-Wl,--as-needed "-Wl,-rpath-link,$libd:$libd/opensaf" "-L$libd" -lSaAmf

    test -r $immxml.orig || cp $immxml $immxml.orig
    $opensaf_home/src/imm/tools/immxml-merge \
	$immxml.orig $appconfig > $immxml
    $opensaf_home/src/imm/tools/immxml-validate $immxml
    echo "Creating [$root/root.cpio] ..."
    cmd_mkcpio
}

##   create_rootfs
##     Create a (shadow) rootfs with OpenSAF and other required programs.
##
cmd_create_rootfs()
{
    echo "(Re-)Creating new root file system..."
    rm -rf $root
    mkdir $root

    cd $root
    echo "Setup dirs and links..."
    if test "$(uname -m)" = "x86_64"; then
	mkdir -p lib64 usr/lib64 usr/sbin usr/bin
	mkdir -p etc/default etc/init.d
	ln -s lib64 usr/lib
	ln -s lib64 lib
    else
	mkdir -p lib usr/lib usr/sbin usr/bin
	mkdir -p etc/default etc/init.d
    fi
    ln -s usr/bin bin
    ln -s usr/sbin sbin

    echo "Installing OpenSAF (takes some time)..."
    if ! make -C $opensaf_home DESTDIR=$root -j$no_of_processors install>$tmp/install.log 2>&1
    then
	cat $tmp/install.log
	die "Failed to install OpenSAF"
    fi
    rm -rf $root/usr/local/share/opensaf/samples \
	$root/usr/local/include \
	$root/usr/local/share/doc \
	$root/usr/local/lib/pkgconfig \
	$root/usr/local/lib/opensaf/*.a \
	$root/usr/local/lib/opensaf/*.la \
	$root/usr/local/lib/*.a $root/usr/local/lib/*.la

    install -m 755 $archive/scripts/*.rc etc/init.d
    cp $scripts/profile etc
    cp $scripts/reboot $scripts/shutdown $scripts/tipc-config usr/sbin
    mkdir -p root/www/cgi-bin
    cp $scripts/rshd root/www/cgi-bin
    cp $scripts/rsh $scripts/rcp $scripts/sudo usr/bin
    chmod +x usr/sbin/shutdown usr/sbin/tipc-config root/www/cgi-bin/rshd usr/bin/rsh usr/bin/rcp usr/bin/sudo

    echo "Copy some needed extra programs (bash, ...)"
    install /bin/bash usr/bin
    install /usr/bin/getent usr/bin
    test -e /bin/ltrace && install /bin/ltrace usr/bin
    test -e /bin/strace && install /bin/strace usr/bin
    test -e /usr/bin/ltrace && install /usr/bin/ltrace usr/bin
    test -e /usr/bin/strace && install /usr/bin/strace usr/bin
    test -e /usr/bin/lsof && install /usr/bin/lsof usr/bin
    test -e /bin/pidof && install /bin/pidof usr/bin
    test -e /usr/sbin/tcpdump && install /usr/sbin/tcpdump usr/sbin
    test -e /usr/bin/addr2line && install /usr/bin/addr2line usr/bin
    if test -e /usr/bin/gdb; then
	install /usr/bin/gdb usr/bin
	if test -d /usr/share/gdb; then
	    tar -C / -cf - usr/share/gdb | tar xf -
	fi
    fi
    if test -e /usr/bin/python; then
	install /usr/bin/python usr/bin
	python_version=$(/usr/bin/python --version 2>&1 | cut -d " " -f 2 | cut -d "." -f 1,2)
	python_lib=$(find /usr/lib/python$python_version -maxdepth 0 2>/dev/null | cut -d " " -f 1 | cut -c2-)
	python_lib64=$(find /usr/lib64/python$python_version -maxdepth 0 2>/dev/null | cut -d " " -f 1 | cut -c2-)
	python_include=$(find /usr/include/python${python_version}*/pyconfig.h -maxdepth 0 2>/dev/null | cut -d " " -f 1 | cut -c2-)
	tar -C / --exclude=site-packages -cf - $python_lib $python_lib64 $python_include | tar xf -
    fi
    if test -e /usr/bin/python3; then
	install /usr/bin/python3 usr/bin
	python_version=$(/usr/bin/python3 --version 2>&1 | cut -d " " -f 2 | cut -d "." -f 1,2)
	python_lib=$(find /usr/lib/python$python_version -maxdepth 0 2>/dev/null | cut -d " " -f 1 | cut -c2-)
	python_lib64=$(find /usr/lib64/python$python_version -maxdepth 0 2>/dev/null | cut -d " " -f 1 | cut -c2-)
	python_include=$(find /usr/include/python${python_version}*/pyconfig.h -maxdepth 0 2>/dev/null | cut -d " " -f 1 | cut -c2-)
	tar -C / --exclude=site-packages -cf - $python_lib $python_lib64 $python_include | tar xf -
    fi
    if test -e /usr/bin/valgrind; then
	install /usr/bin/valgrind usr/bin
	test -e /usr/bin/valgrind.bin && install /usr/bin/valgrind.bin usr/bin
        valgrind_lib=lib
        test -d /usr/$valgrind_lib/valgrind || valgrind_lib=lib64
	tar -C / -cf - usr/$valgrind_lib/valgrind | tar xf -
	cat >> usr/$valgrind_lib/valgrind/default.supp <<EOF
{
   ld index
   Memcheck:Cond
   fun:index
   obj:/hostfs/rootfs/lib*/ld-linux*.so*
}
EOF
    fi

    # Some distros use startproc/killproc, others start-stop-daemon
    test -e /sbin/startproc && install /sbin/startproc usr/sbin
    test -e /sbin/killproc && install /sbin/killproc usr/sbin
    test -e /sbin/pidofproc && install /sbin/pidofproc usr/sbin
    test -e /sbin/start-stop-daemon && install /sbin/start-stop-daemon usr/sbin

    mkdir -p lib/lsb
    install /lib/lsb/init-functions lib/lsb
    test -e /etc/rc.status && install /etc/rc.status etc

    # Needed for Fedora/RHEL LSB support
    test -e /etc/redhat-lsb && \
       mkdir -p etc/redhat-lsb && install /etc/redhat-lsb/* etc/redhat-lsb
    test -e /etc/init.d/functions && install /etc/init.d/functions etc/init.d
    test -e /sbin/consoletype && install /sbin/consoletype usr/sbin

	# Configure LOG root path depending of logFileSysConfig setting
	if grep -A 3 logFileSysConfig usr/local/share/opensaf/immxml/services/logsv_objects.xml | \
       grep -q -o "<value>2</value>"; then
	    # Use default configuration
		echo "Log filesystem config 2 (split)"
	else
		echo "Log filesystem config 1 (shared)"
		# Change LOG configuration to use "replicated" disk
		sed -i 's/=$pkglogdir\/saflog/=\/repl_opensaf\/saflog/g' \
		etc/opensaf/logd.conf
		sed -i 's/\/var\/log\/opensaf\/saflog/\/repl_opensaf\/saflog/g' \
		usr/local/share/opensaf/immxml/services/logsv_objects.xml
	fi

    # Change core pattern, uml cannot write cores to hostfs
    sed -i 's/var\/crash\/opensaf/tmp/g' etc/init.d/opensafd

    # Run OpenSAF as root if it was built to run as root
    if grep -q RUNASROOT $opensaf_home/config.log; then
	sed -i '/export\ OPENSAF_GROUP/d' etc/opensaf/nid.conf
	sed -i '/export\ OPENSAF_USER/d' etc/opensaf/nid.conf
    fi

    # Select TIPC transport if OpenSAF was configured with it.
    if grep -q "define ENABLE_TIPC_TRANSPORT 1" ../../../src/osaf/config.h; then
	sed -i 's/MDS_TRANSPORT=TCP/MDS_TRANSPORT=TIPC/g' etc/opensaf/nid.conf
        # Increase RDE peer discovery timeout to match the TIPC link tolerance
        sed -i 's/#export RDE_DISCOVER_PEER_TIMEOUT=5000/export RDE_DISCOVER_PEER_TIMEOUT=4000/' etc/opensaf/rde.conf
    fi

    # The var directory structure is setup from within each UML
    rm -rf var/*

    # Copy local timezone settings
    test -f /etc/localtime && install /etc/localtime etc

    # Create a dummy /etc/hosts file, will be populated at start
    touch $root/etc/hosts

    echo "Installing required dynamic libs..."
    cmd_installibs

    cmd_installextra

    echo "Generating imm.xml for a default sized cluster"
    cmd_generate_immxml
    echo -e "\n Command to generate the imm.xml for other size of cluster:\n \"build_uml generate_immxml [controllers] [payloads]\"\n"

    cd $top
    if test -n "$INSTALL_TESTPROG"; then
	echo "Building and installing test program"
	cmd_install_testprog
    else
        echo "Creating [$root/root.cpio] ..."
        cmd_mkcpio
    fi

    # Remove line for starting plms
    sed '/PLMD/d' < $root/etc/opensaf/nodeinit.conf.controller > \
        $root/etc/opensaf/nodeinit.conf.controller.tmp
    mv $root/etc/opensaf/nodeinit.conf.controller.tmp \
        $root/etc/opensaf/nodeinit.conf.controller
}

##   installibs
##     Install required dynamic libraries.
##     opensaf dependencies are excluded.
##
cmd_installibs() {
    local deplib=$tmp/deplib
    cd $root
    cmd_getlibs \
	$(find . -name osafimmloadd -or -name libopensaf_core.so) ./usr/bin/* ./usr/sbin/* |\
	grep -v -e 'libSa\|libimmsv\|libsaf' \
	-e "^/$lib_dir/ld-\|^/$lib_dir/libc.so" > $deplib
    local all_dirs=`ldd $build/bin/busybox | tr -s ' \t' '\n' | grep /lib | sed -e 's,/tls,,' | sed -e 's:/[^/]*$::'`
    for d in $all_dirs; do
	if [ -e $d/libnss_files.so.? ]; then
	    echo $d/libnss_files.so.? >> $deplib
	fi
	if [ -e $d/libthread_db.so.? ]; then
	    echo $d/libthread_db.so.? >> $deplib
	fi
	if [ -e $d/libffi.so.? ]; then
	    echo $d/libffi.so.? >> $deplib
	fi
	if [ -e /usr$d/libffi.so.? ]; then
	    echo /usr$d/libffi.so.? >> $deplib
	fi
    done

    for n in $(cat $deplib | sort | uniq); do
        # Skip OpenSAF libraries installed on the host
        if echo $n | grep opensaf; then
            continue
        fi
        dst=usr/$lib_dir
        echo $n | grep -q '^/lib' && dst=$lib_dir
        echo "  $n -> rootfs/$dst/$(basename $n)"
        cp -L $n $dst || die "Failed [cp -L $n $dst]"
    done
    mkdir -p $lib_dir/.debug
    if test -d /usr/lib/debug; then
	find /usr/lib/debug -name "ld-*.so" -exec cp -L {} $lib_dir/.debug \;
	find /usr/lib/debug -name "libc-*.so" -exec cp -L {} $lib_dir/.debug \;
	find /usr/lib/debug -name "libm-*.so" -exec cp -L {} $lib_dir/.debug \;
	find /usr/lib/debug -name "libpthread-*.so" -exec cp -L {} $lib_dir/.debug \;
	find /usr/lib/debug -name "librt-*.so" -exec cp -L {} $lib_dir/.debug \;
	find /usr/lib/debug -name "libdl-*.so" -exec cp -L {} $lib_dir/.debug \;
    fi
}

##   installextra
##     Install extra files by extracting tar files found in $OSAF_UML_EXTRA.
##
cmd_installextra() {
    if [ -n "$OSAF_UML_EXTRA" -a -d "$OSAF_UML_EXTRA" ]
    then
        echo "Installing extra files..."
        for package in $OSAF_UML_EXTRA/*
        do
            base=$(basename "$package")
            gzbase=$(basename "$package" gz)
            bz2base=$(basename "$package" bz2)
            xzbase=$(basename "$package" xz)
            if [ "$base" != "$gzbase" ]
            then
                echo "  Extracting $base..."
                gzip -dc "$package" | tar -C "$root" -xpf -
            elif [ "$base" != "$bz2base" ]
            then
                echo "  Extracting $base..."
                bzip2 -dc "$package" | tar -C "$root" -xpf -
            elif [ "$base" != "$xzbase" ]
            then
                echo "  Extracting $base..."
                xz -dc "$package" | tar -C "$root" -xpf -
            else
                echo "  Skipping $base"
            fi
        done
    fi
}

##   mklndircpio <fromdir> <archive> [prefix]
##     Creates cpio archive with a link-tree with absolute links.
##
cmd_mklndircpio() {
    test -n "$1" -a -n "$2" || die "Missing param"
    test -d "$1" || die "Not a directory [$1]"
    cpio_archive=$2
    prefix=${3:-/hostfs/rootfs}
    tmpd=$tmp/mklndircpio$$
    echo $cpio_archive | grep -q "^/" || cpio_archive=$top/$cpio_archive
    rm -f $cpio_archive
    cd $1
    lndirs=$(find ./usr/include ./usr/lib ./usr/lib64 -mindepth 1 -maxdepth 1 -type d)
    excludedirs=
    for n in $lndirs; do
	excludedirs="$excludedirs -path $n -prune -o"
	echo $excludedirs
    done
    items=`find ./ $excludedirs -true | sed -e 's,./,,'`
    for n in $items; do
	if test -d $n; then
	    mkdir -p $tmpd/$n || die "Can't create dir [$tmpd/$n]"
	else
	    ln -s $prefix/$n $tmpd/$n || die "Can't create link [$tmpd/$n]"
	fi
    done
    cd $tmpd
    for n in $lndirs; do
	rm -rf $tmpd/$n
	ln -s $prefix/$n $tmpd/$n || die "Can't create link [$tmpd/$n]"
    done
    echo $items | tr ' ' '\n' | cpio -o -H newc > $cpio_archive
}

##   mkcpio
##     Re-build the "rootfs/root.cpio" file using the "mklndircpio"
##     sub-command.
##
cmd_mkcpio() {
    cmd_mklndircpio $root $root/root.cpio /hostfs/rootfs >& /dev/null ||\
	die Failed
}

##   default
##     Backward compatible default command.
##
cmd_default() {
    if find rootfs -name opensafd >& /dev/null; then
	echo "OpenSAF seems to be installed already, cowardly refusing..."
	echo "   Remove directory 'rootfs' if a fresh install is needed"
	rm -rf "$tmp"
	exit 0
    fi

    # Build the Linux UML binary
    ./uml/build_uml all || die "build of UML Linux kernel failed"
    cmd_create_rootfs
}

##   gen_immxml
##     Generates the imm.xml file with a given cluster size.
##     Default size with no argument given is 2 SC's and 3 PL's.
##     With two arguments, you specify the number of SC's and PL's.
##     With just one argument, you specify the total number of nodes.
##     For example (generates imm.xml for 3 SC's and 7 PL's):
##        ./build_uml generate_immxml 3 7
##
cmd_generate_immxml() {
    if [ $# -ge 2 ]; then
	sc_count=${1:-2}
	pl_count=${2:-3}
    else
	numnodes=${1:-5}
	if test $numnodes -lt 2 ; then
            sc_count=1
            pl_count=0
	else
            sc_count=2
            pl_count=$[$numnodes-2]
	fi
    fi
    cd $top

    if test ! -d rootfs ; then
	echo "   This command requires an existing 'rootfs' directory"
	rm -rf "$tmp"
	exit 0
    fi

    # generate imm.xml file
    cd rootfs/usr/local/share/opensaf/immxml

    echo "Generating the imm.xml file with $sc_count SC's and $pl_count PL's"
    ./immxml-clustersize --sc-count $sc_count --pl-count $pl_count >$tmp/install.log 2>&1
    rm -f imm_generated.xml
    if ! ./immxml-configure imm_generated.xml
    then
	die "Failed to generate immxml"
    fi
    cp -f imm_generated.xml $root/etc/opensaf/imm.xml
    cd $top
    echo "generate_immxml complete."
}

# Get the command
if test -n "$1"; then
    cmd=$1
    shift
else
    cmd=default
fi
grep -q "^cmd_$cmd()" $0 || die "Invalid command [$cmd]"
trap "die Interrupted" INT TERM
cmd_$cmd "$@"
status=$?
rm -rf "$tmp"
exit $status
