#!/bin/bash
#
#      -*- OpenSAF  -*-
#
# (C) Copyright 2008-2016 The OpenSAF Foundation
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. This file and program are licensed
# under the GNU Lesser General Public License Version 2.1, February 1999.
# The complete license can be accessed from the following location:
# http://opensource.org/licenses/lgpl-license.php
# See the Copying file included with the OpenSAF distribution for full
# licensing terms.
#
# Author(s): Ericsson AB
#
#

##
## build_uml --
##   Build script for the User Mode Linux (UML) for OpenSAF.
##
##   Files such as the Linux kernel archive will be downloaded automatically
##   with "wget". The files will be stored in the directory defined by the
##   $OSAF_UML_ARCHIVE variable.
##
## Syntax:
##
##   build_uml <sub-command> [options...]
##
## Environment:
##
##   All environment settings are optional.
##
##   $OSAF_UML_ARCHIVE - Should point to a directory where dowloaded files are
##                       stored.
##   $OSAF_UML_BUILD   - Should point to a directory where UML packages are
##                       built.
##   $OSAF_UML_CONFIGD - Contains configurations for different kernel and
##                       busybox versions (default ./config).
##   $OSAF_UML_KVER    - The Linux kernel version to use.
##   $OSAF_UML_BBVER   - The BusyBox version to use.
##   $OSAF_UML_IPRVER  - The iproute2 version to use.
##
## Sub-commands:
##

pgm=$(basename "$0")
dir=$(dirname "$0"); dir=$(cd "$dir"; pwd)
tmp=$(mktemp -d /tmp/"${pgm}"$$.XXXXXXXXXX)
no_of_processors=$(find /sys/devices/system/cpu -name 'cpu[0-9]*' -print | wc -l)
if [ "$no_of_processors" -le 0 ]; then
    no_of_processors=1
fi

die() {
    echo "ERROR: $*" >&2
    rm -rf "$tmp"
    exit 1
}
help() {
    grep '^##' "$0" | cut -c3-
    rm -rf "$tmp"
    exit 0
}
test -n "$1" || help
cd "$dir"
archive=${OSAF_UML_ARCHIVE:-$dir/archive}
build=${OSAF_UML_BUILD:-$dir}
configd=${OSAF_UML_CONFIGD:-$dir/config}

kver=${OSAF_UML_KVER:-4.13.3}
kbasedir=$(echo "$kver" | cut -d. -f1).x
#kurlbase=${KURLBASE:-"https://www.kernel.org/pub/linux/kernel/v$kbasedir"}
kurlbase=${KURLBASE:-"http://ftp.funet.fi/pub/mirrors/ftp.kernel.org/pub/linux/kernel/v$kbasedir"}
#kurlbase=${KURLBASE:-"http://ftp.funet.fi/pub/mirrors/ftp.kernel.org/pub/linux/kernel/v$kbasedir/testing"}
kernel_decompress=xz
kurl="$kurlbase/linux-$kver.tar.xz"
kernel_sha256sum='03d22c74a102b66341b6f52e72142f0544cea3b413ca78bffe7d2a09e288caab  linux-4.13.3.tar.xz'

iproute2ver=${OSAF_UML_IPRVER:-4.13.0}
iproute2url="https://www.kernel.org/pub/linux/utils/net/iproute2/iproute2-$iproute2ver.tar.xz"
#iproute2url="http://ftp.funet.fi/pub/mirrors/ftp.kernel.org/pub/linux/utils/net/iproute2/iproute2-$iproute2ver.tar.xz"
iproute2_sha256sum='9cfb81edf8c8509e03daa77cf62aead01c4a827132f6c506578f94cc19415c50  iproute2-4.13.0.tar.xz'

bbver=${OSAF_UML_BBVER:-1.27.2}
bburl="http://busybox.net/downloads/busybox-$bbver.tar.bz2"
bb_sha256sum='9d4be516b61e6480f156b11eb42577a13529f75d3383850bb75c50c285de63df  busybox-1.27.2.tar.bz2'

umlutilsver=20070815
umlutilsurl="http://user-mode-linux.sourceforge.net/uml_utilities_$umlutilsver.tar.bz2"
umlutils_sha256sum='f815f591a1c177729546969acf720958c5fd72b8d4d36bae26fdc5b64669b60e  uml_utilities_20070815.tar.bz2'

arch=$(uname -m)
gid=$(id -g)

if [ "$arch" = x86_64 ]; then
    lib_dir=lib64
else
    lib_dir=lib
fi

test -d "$build" || mkdir -p "$build"
test -d "$build" || die "Invalid build directory [$build]"
cd "$build"

##   info
##     Printout general info.
##
cmd_info() {
    echo "Base dir: $dir"
    echo "Archive: $archive"
    echo "Build: $build"
    echo "Linux kernel $kver:"
    f=$archive/$(basename "$kurl")
    test -r "$f" && exists="(exists)"
    echo "    $f $exists"
    echo "    $kurl"
    echo "BusyBox $bbver:"
    f=$archive/$(basename $bburl)
    test -r "$f" && exists="(exists)"
    echo "    $f $exists"
    echo "    $bburl"
    echo "iproute2 $iproute2ver:"
    f=$archive/$(basename $iproute2url)
    test -r "$f" && exists="(exists)"
    echo "    $f $exists"
    echo "    $iproute2url"
    echo "UML Utils $umlutilsver:"
    f=$archive/$(basename $umlutilsurl)
    test -r "$f" && exists="(exists)"
    echo "    $f $exists"
    echo "    $umlutilsurl"
}

##   gen_initramfs_list
##     Generate the file linux-$kver/initramfs_list which describes the contens
##     of the initramfs
##
cmd_gen_initramfs_list() {
    chmod +x linux-$kver/scripts/gen_initramfs_list.sh
    ./linux-$kver/scripts/gen_initramfs_list.sh -u $UID -g $gid \
        "$build/root" "$build/root/dev/initramfs_list" \
        > linux-$kver/initramfs_list
    rm -f linux-$kver/usr/initramfs_data.cpio*
    sed -ie '/^file \/usr\/bin\/busybox /s/ [0-7][0-7]* 0 0$/ 4755 0 0/' linux-$kver/initramfs_list
    sed -ie '/^dir \/var\/lib\/opensaf /s/ [0-7][0-7]* 0 0$/ 755 '"$UID $gid/" linux-$kver/initramfs_list
    sed -ie '/^dir \/var\/log\/opensaf /s/ [0-7][0-7]* 0 0$/ 755 '"$UID $gid/" linux-$kver/initramfs_list
    sed -ie '/^dir \/var\/run\/opensaf /s/ [0-7][0-7]* 0 0$/ 755 '"$UID $gid/" linux-$kver/initramfs_list
    sed -ie '/^dir \/lib64\/modules 755 0 0$/d;/^dir \/lib64 755 0 0$/a\\'$(printf '\n')'dir \/lib64\/modules 755 0 0' linux-$kver/initramfs_list
}

##   download
##     Download all necessary packaget from the net using "wget". Make
##     sure that your proxy-settings are correct.
##
cmd_download() {
    mkdir -p $archive
    for a in $kurl $bburl $umlutilsurl $iproute2url; do
	f=$(basename $a)
	if test -s $archive/$f; then
	    echo "Already downloaded [$f]"
	    continue
	fi
	rm -f $archive/.checksum_ok
	wget -O "$archive/$f.part" "$a" || die "Download failed [$a]"
	mv -f "$archive/$f.part" "$archive/$f"
    done
    if [ ! -e $archive/.checksum_ok ]; then
	: > $archive/SHA256SUMS
	echo "$iproute2_sha256sum" >> $archive/SHA256SUMS
	echo "$bb_sha256sum" >> $archive/SHA256SUMS
	echo "$umlutils_sha256sum" >> $archive/SHA256SUMS
	echo "$kernel_sha256sum" >> $archive/SHA256SUMS
	(cd $archive; sha256sum -c SHA256SUMS) || die "Bad file checksum(s)"
	touch $archive/.checksum_ok
    fi
}

##   clean_if_needed
##     Clean up built binaries if any tool version has changed.
##
cmd_clean_if_needed() {
    cd "$build"
    clean_needed=0
    test -d linux-$kver || clean_needed=1
    test -d busybox-$bbver || clean_needed=1
    test -d iproute2-$iproute2ver || clean_needed=1
    test -d tools-$umlutilsver || clean_needed=1
    if [ "$clean_needed" -eq "1" ]; then
	cd "$dir/.."
	./uml/clean_uml
	cd "$build"
    fi
}

##   extract_kernel
##     Unpack the Linux kernel.
##     Prerequisite: Kernel and patch archives must have been downloaded.
##
cmd_extract_kernel() {
    if test -d linux-$kver; then
	echo "Already extracted [linux-$kver]"
	return 0
    fi
    f=$archive/$(basename $kurl)
    test -r $f || die "Not readable [$f]"
    echo "Extracting [linux-$kver]..."
    rm -rf linux-extract-dir linux-$kver
    mkdir linux-extract-dir
    $kernel_decompress -cd "$f" | tar -C linux-extract-dir -xf - && mv linux-extract-dir/* .
    rm -rf linux-extract-dir
}

##   refresh_root
##     Update the root/ directory, for instance when the root_template
##     is altered.
##
cmd_refresh_root() {
    rm -rf root
    cmd_create_initramfs

    # Install modules into initramfs and rebuild Linux kernel
    INSTALL_MOD_PATH=$build/root make -C linux-$kver ARCH=um modules_install
    rm -f root/$lib_dir/modules/$kver/build \
        root/$lib_dir/modules/$kver/source \
        linux-$kver/initramfs_list
    cmd_gen_initramfs_list
    make -C linux-$kver -j$no_of_processors ARCH=um

    cp linux-$kver/vmlinux bin/linux || die "Could not build linux"
    strip bin/linux
}

cmd_patch_tipc_tolerance() {
    tipc_cfg=$build/linux-$kver/include/uapi/linux/tipc_config.h
    test -e "$tipc_cfg" || tipc_cfg=$build/linux-$kver/include/linux/tipc_config.h
    grep -q 'TIPC_DEF_LINK_TOL 1500' $tipc_cfg || return 0
    mv -f $tipc_cfg $tipc_cfg.orig
    sed -e 's,TIPC_DEF_LINK_TOL 1500,TIPC_DEF_LINK_TOL 3500,' \
	< $tipc_cfg.orig > $tipc_cfg
    echo "Patched TIPC_DEF_LINK_TOL 3500"
    return 0
}

##   build_linux
##     Build the UML kernel.
##
cmd_build_linux()
{
    if test -x bin/linux; then
	echo "Already built [bin/linux]"
        return 0
    fi
    test -r $build/root/dev/initramfs_list || die "Root-fs not built"

    cfg=$configd/linux-$kver-$arch
    test -r $cfg || cfg=$dir/config/linux-config-$arch
    cp -L $cfg linux-$kver/.config
    cmd_gen_initramfs_list

    cmd_patch_tipc_tolerance
    make -C linux-$kver -j$no_of_processors ARCH=um oldconfig
    make -C linux-$kver -j$no_of_processors ARCH=um
    make -C linux-$kver headers_install
    cmd_refresh_root
}

##   build_busybox
##     Extract and buuild busybox.
##
cmd_build_busybox()
{
    if test -e bin/busybox; then
	echo "Already built [bin/busybox]"
        return
    fi

    f=$archive/$(basename $bburl)
    test -r $f || die "Not downloaded [$f]"
    rm -rf busybox-$bbver
    tar xjf $f

    test -f bin && rm -f bin
    test -d bin || mkdir -p bin
    cfg=$configd/busybox-$bbver
    test -r $cfg || cfg=$dir/config/busybox-config
    cp -L $cfg busybox-$bbver/.config
    make -C busybox-$bbver -j$no_of_processors
    cp busybox-$bbver/busybox bin || die "Could not build busybox"
    strip bin/busybox
}

##   create_initramfs
##     Build an incomplete ramfs; kernel modules are missing
##     Dependent on busybox and iproute2.
##
cmd_create_initramfs()
{
    if test -d root; then
	echo "Already created [root/]"
        return 0
    fi

    rm -rf root
    cp -rL $dir/root_template root
    if [ $(uname -m) = x86_64 ]; then
      rm -Rf root/lib root/usr/lib
      ln -s lib64 root/lib
      ln -s lib64 root/usr/lib
    fi
    rm -Rf root/bin root/sbin
    ln -s usr/bin root/bin
    ln -s usr/sbin root/sbin
    cp -L bin/tipc root/sbin
    cp -L bin/busybox root/usr/bin
    for n in usr/bin/sh usr/sbin/init; do
        ln -fs /usr/bin/busybox root/$n
    done
    cp -L `ldd ./bin/busybox | tr -s ' \t' '\n' | grep /lib | sed -e 's,/tls,,'` root/$lib_dir
    local all_dirs=`ldd ./bin/tipc | tr -s ' \t' '\n' | grep /lib | sed -e 's,/tls,,' | sed -e 's:/[^/]*$::'`
    for d in $all_dirs; do
	cp -L $d/libnss_files.so.? $d/libpthread.so.? $d/libm.so.? $d/libmnl.so.? root/$lib_dir 2> /dev/null
    done
    for n in passwd group; do
	sed -i -e "s/OPENSAF_USER/$UID/g" root/etc/$n
	sed -i -e "s/OPENSAF_GROUP/$gid/g" root/etc/$n
    done
    chown -hR $UID:$gid root
}

##   build_umlutils
##     Extract and build the UML tools.
##
cmd_build_umlutils()
{
    if test -e bin/uml_mconsole; then
	echo "Already built [bin/uml_mconsole]"
        return 0
    fi

    f=$archive/$(basename $umlutilsurl)
    test -r $f || die "Not downloaded [$f]"
    rm -rf tools-$umlutilsver
    tar xjf $f

    make CFLAGS="-s -O3" -C tools-$umlutilsver/lib
    make CFLAGS="-s -O3" -C tools-$umlutilsver/uml_switch
    cp tools-${umlutilsver}/uml_switch/uml_switch bin || die "Could not build uml_switch"
    make CFLAGS="-s -O3" -C tools-$umlutilsver/port-helper
    cp tools-${umlutilsver}/port-helper/port-helper bin || die "Could not build port-helper"
    make CFLAGS="-s -O3" -C tools-$umlutilsver/tunctl
    cp tools-${umlutilsver}/tunctl/tunctl bin || die "Could not build tunctl"
    make CFLAGS="-s -O3" -C tools-$umlutilsver/mconsole
    cp tools-${umlutilsver}/mconsole/uml_mconsole bin || die "Could not build uml_mconsole"
    make CFLAGS="-s -O3" -C tools-$umlutilsver/uml_net
    cp tools-${umlutilsver}/uml_net/uml_net bin || die "Could not build uml_net"
}

##   build_iproute2
##     Extract and build iproute2.
##
cmd_build_iproute2()
{
    if test -e bin/tipc; then
	echo "Already built [bin/tipc]"
        return 0
    fi
    f=$archive/$(basename $iproute2url)
    test -r $f || die "Not downloaded [$f]"
    rm -rf iproute2-$iproute2ver
    tar Jxf $f
    test -f bin && rm -f bin
    test -d bin || mkdir -p bin
    cd iproute2-$iproute2ver
    ./configure
    cd tipc
    mkdir linux
    cp $build/linux-$kver/include/uapi/linux/tipc*.h linux
    make -j$no_of_processors CFLAGS="-s -pipe -O2 -I." tipc
    cd $build
    cp iproute2-$iproute2ver/tipc/tipc bin || die "Could not build tipc"
}

##   clean
##     Cleanup. Downloaded files are *not* removed.
##
cmd_clean() {
    rm -rf linux-$kver busybox-$bbver root iproute2-$iproute2ver\
        tools-$umlutilsver linux-extract-dir
    for n in busybox tipc uml_mconsole uml_switch uml_net\
        linux port-helper tunctl; do
	rm -f bin/$n
    done
}

##   all
##     Dowload/extract/build everything.
##     This corresponds to the old "./build_uml" without parameters.
##
cmd_all() {
    cmd_download
    cmd_clean_if_needed
    cmd_extract_kernel
    cmd_build_iproute2
    cmd_build_busybox
    cmd_create_initramfs
    cmd_build_linux
    cmd_build_umlutils
}

cmd=$1; shift
grep -q cmd_$cmd $dir/$pgm || die "Invalid command [$cmd]"
trap "die Interrupted" INT TERM
cmd_$cmd "$@"
rc=$?
rm -rf $tmp
exit $rc
