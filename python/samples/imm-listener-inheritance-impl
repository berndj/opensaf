#!/usr/bin/env python
############################################################################
#
# (C) Copyright 2015 The OpenSAF Foundation
# (C) Copyright 2018 Ericsson AB. All rights reserved.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. This file and program are licensed
# under the GNU Lesser General Public License Version 2.1, February 1999.
# The complete license can be accessed from the following location:
# http://opensource.org/licenses/lgpl-license.php
# See the Copying file included with the OpenSAF distribution for full
# licensing terms.
#
# Author(s): Ericsson AB
#
############################################################################
# pylint: disable=invalid-name
""" Sample illustrates the usage of Applier by inheritance way """
from __future__ import print_function
import argparse
import sys

from pyosaf.saImm import eSaImmClassCategoryT
from pyosaf.utils.immoi.agent import OiAgent
from pyosaf.utils.immoi.implementer import Applier


class ImmListener(Applier):
    """ This class listens to modifications to IMM and prints them on STDOUT.
        It extends the Applier class and overrides the apply function.
    """

    def __init__(self, class_names):
        """ Creates a listener applier for the given class names """
        Applier.__init__(self, class_names, name='ImmListener')

    def on_apply(self, instances, updated, created, deleted):
        """ Overrides the apply method in Applier to print any modifications to
            configuration data in IMM
        """
        print('-' * 10 + " Configuration changed " + '-' * 10)

        # Handle creates
        print("Created objects")
        for obj in created:
            self.print_mo(obj)

        # Handle deletes
        print("Deleted objects")
        for obj in deleted:
            print("\t%s" % obj.dn)

        # Handle updates
        print("Updated objects")
        for obj in updated:
            self.print_mo(obj)

    @staticmethod
    def print_mo(obj):
        """ Prints an MO instance """
        print("\t%s" % obj.dn)

        # Print attributes
        for name, type_value_pair in obj.attrs.iteritems():
            value = type_value_pair[1]

            if len(value) == 1:
                value = value[0]

            print("\t\t %s: %s" % (name, value))


def is_config_class(cls_name):
    """ Returns True if the given class is a configuration class,
        otherwise False
    """
    category = oi_agent.imm_om.get_class_category(cls_name)
    return category == eSaImmClassCategoryT.SA_IMM_CLASS_CONFIG


if __name__ == "__main__":
    # Initialize OI agent
    oi_agent = OiAgent()
    oi_agent.initialize()

    # Parse command line arguments
    description = """
    Listens to changes to objects of the given classes

    Use like this:

    $ imm-listener-inheritance-impl SampleClass1 SampleClass2

    or, to listen for changes to all configuration classes:

    $ imm-listener-inheritance-impl --all
    """
    parser = argparse.ArgumentParser(
        description=description,
        formatter_class=argparse.RawTextHelpFormatter)

    parser.add_argument('classes', type=str, nargs='*',
                        help='space-separated list of class names')
    parser.add_argument('--all', help='listens to changes to all classes',
                        dest='all', action='store_const', const=all,
                        default=False)

    args = parser.parse_args()

    classes = args.classes

    listen_to_all = args.all

    # Exit if no classes are passed
    if not listen_to_all and (not classes or classes == []):
        print("ERROR: Must specify classes to listen to or '--all'")
        sys.exit(1)

    # Sort out which classes to listen to
    all_available_classes = oi_agent.get_available_classes_in_imm()
    classes_to_listen_to = []

    if listen_to_all:
        print("INFO: Listening to changes to all configuration classes")

        classes_to_listen_to = [c for c in all_available_classes
                                if is_config_class(c)]
    else:
        # Validate classes
        for class_name in classes:
            if class_name not in all_available_classes:
                print("WARNING: Ignoring %s. It does not exist in IMM" %
                      class_name)
                continue
            elif not is_config_class(class_name):
                print("WARNING: Ignoring runtime class %s" % class_name)
                continue

            classes_to_listen_to.append(class_name)

    if not classes_to_listen_to:
        print("INFO: There is nothing to listen")
        sys.exit(1)

    print("INFO: Listening for changes in %s" % ", "
          .join(classes_to_listen_to))

    imm_listener = ImmListener(classes_to_listen_to)

    imm_listener.enter_dispatch_loop()
