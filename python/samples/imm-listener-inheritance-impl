#!/usr/bin/env python

import argparse
import sys

from pyosaf.saAis import eSaAisErrorT

from pyosaf.saImm import eSaImmClassCategoryT

from pyosaf.utils.immoi import get_available_classes_in_imm
from pyosaf.utils.immom import get_class_category
from pyosaf.utils.immoi.implementer import Applier


class ImmListener(Applier):
    ''' This class listens to modifications to IMM and prints
        them on STDOUT. 

        It extends the Applier class and overrides the apply function.

    '''

    def __init__(self, class_names=[]):
        ''' Creates a listener applier for the given class names '''
        Applier.__init__(self, class_names, name='ImmListener')

    def on_apply(self, instances, updated, created, deleted):
        ''' Overrides the apply method in Applier to print
            any modifications to configuration data in IMM
        '''

        print
        print '-' * 10 + " Configuration changed " + '-' * 10

        # Handle creates
        print "  Created objects"
        for mo in created:
            self.print_mo(mo)

        # Handle deletes
        print "  Deleted objects"
        for mo in deleted:
            print "    %s" % mo

        # Handle updates
        print "  Updated objects"
        for mo in updated:
            self.print_mo(mo)

    def on_create_added(self, class_name, parent, obj):
        ''' Overrides on_create in Applier. This method is called each
            time a create operation is added to a CCB.
        '''

        print
        print
        print '-' * 10  + " Create added to CCB " + '-' * 10
        print
        print "Class: %s" % class_name
        print "Parent: %s" % parent
        print
        self.print_mo(obj)
        print

        return eSaAisErrorT.SA_AIS_OK

    def on_delete_added(self, dn):
        ''' Overrides on_delete in Applier. This method is called each
            time a delete operations is added to a CCB.
        '''

        print
        print
        print '-' * 10 + " Delete added to CCB " + '-' * 10
        print
        print "    %s" % dn

        return eSaAisErrorT.SA_AIS_OK

    def print_mo(self, mo):
        ''' Prints an MO instance '''

        print "    %s" % mo.dn

        # Print attributes
        for name, type_value_pair in mo.attrs.iteritems():
            value = type_value_pair[1]

            if len(value) == 1:
                value = value[0]

            print "        - %s: %s" % (name, value)


def is_config_class(class_name):
    ''' Returns True if the given class is a configuration class,
        otherwise False
    '''

    category = get_class_category(class_name)

    return category == eSaImmClassCategoryT.SA_IMM_CLASS_CONFIG


if __name__ == "__main__":

    # Parse command line arguments
    parser = argparse.ArgumentParser(
        description='''Listens to changes to objects of the given classes
Use like this:

$ imm-listener-inheritance-impl SampleClass1

or, to listen for changes to all configuration classes:

$ imm-listener-inheritance-impl --all
''', formatter_class=argparse.RawTextHelpFormatter)

    parser.add_argument('classes', type=str, nargs='*', 
                        help='space-separated list of class names')
    parser.add_argument('--all', help='listens to changes to all classes',
                        dest='all', action='store_const', const=all, 
                        default=False)

    args = parser.parse_args()

    classes = args.classes

    listen_to_all = args.all

    # Exit if no classes are passed
    if not listen_to_all and (not classes or classes == []):
        print "ERROR: Must specify classes to listen to or '--all'"
        sys.exit(1)

    # Sort out which classes to listen to
    all_available_classes = get_available_classes_in_imm()
    classes_to_listen_to = []

    if listen_to_all:
        print "INFO: Listening to changes to all configuration classes"

        classes_to_listen_to = [c for c in all_available_classes \
                                if is_config_class(c)]

    else:

        # Validate classes
        for class_name in classes:

            if not class_name in all_available_classes:
                print "WARNING: Ignoring %s. It does not exist in IMM" % class_name

                continue

            elif not is_config_class(class_name):
                print "WARNING: Ignoring runtime class %s" % class_name

                continue

            classes_to_listen_to.append(class_name)

    print "INFO: Listening for changes in %s" % ", ".join(classes_to_listen_to)

    imm_listener = ImmListener(classes_to_listen_to)

    imm_listener.enter_dispatch_loop()

