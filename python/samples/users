#!/usr/bin/env python
############################################################################
#
# (C) Copyright 2015 The OpenSAF Foundation
# (C) Copyright 2018 Ericsson AB. All rights reserved.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. This file and program are licensed
# under the GNU Lesser General Public License Version 2.1, February 1999.
# The complete license can be accessed from the following location:
# http://opensource.org/licenses/lgpl-license.php
# See the Copying file included with the OpenSAF distribution for full
# licensing terms.
#
# Author(s): Ericsson AB
#
############################################################################
# pylint: disable=deprecated-lambda
# pylint: disable=unused-argument
# pylint: disable=import-error
""" This is a Tones application give usage Implementer to create object """
import argparse
import psutil

from pyosaf import saAis
from pyosaf.utils import SafException
from pyosaf.utils.immom.object import ImmObject
from pyosaf.utils.immoi.implementer import Implementer


def on_attribute_update(*args):
    """ Update attribute callback function """
    return list(set(map(lambda x: x.name, psutil.users())))


if __name__ == '__main__':
    # Parse command line arguments
    description = """
    Creates the usersId=1 object and updates its users attribute with the
    current list of logged in users when it is read in IMM.

    Make sure 'psutil' library installed on Opensaf environment, if NOT
    please follow command: $sudo pip install psutil

    Use like this:

    $ users &

    $ immlist usersId=1
    """
    parser = argparse.ArgumentParser(
        description=description,
        formatter_class=argparse.RawTextHelpFormatter)

    parser.parse_args()

    users_implementer = Implementer(on_runtime_values_get=on_attribute_update,
                                    name='UsersImplementer')

    try:
        obj = ImmObject(class_name='UsersSampleClass', dn='usersId=1')

        obj.usersId = 'usersId=1'

        users_implementer.create(obj)
    except SafException as err:
        if not err.value == saAis.eSaAisErrorT.SA_AIS_ERR_EXIST:
            raise err

    users_implementer.enter_dispatch_loop()
