#! /usr/bin/env python
############################################################################
#
# (C) Copyright 2018 Ericsson AB. All rights reserved.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. This file and program are licensed
# under the GNU Lesser General Public License Version 2.1, February 1999.
# The complete license can be accessed from the following location:
# http://opensource.org/licenses/lgpl-license.php
# See the Copying file included with the OpenSAF distribution for full
# licensing terms.
#
# Author(s): Ericsson
#
############################################################################
# pylint: disable=unused-argument
"""
ntfsubscribe tool used to subscribe for incoming notifications from NTF

Run ntfsubscribe -h/--help for more detail on usage
"""
from __future__ import print_function
import sys
import select
import argparse
from datetime import datetime, tzinfo, timedelta

from pyosaf import saNtf
from pyosaf.saAis import eSaAisErrorT, eSaDispatchFlagsT
from pyosaf.utils.ntf import agent as ntf
from pyosaf.utils.ntf.subscriber import NtfSubscriber


class UTCOffsetTZ(tzinfo):
    """ Time zone represented as UTC hour-offset """
    def __init__(self, hour_offset):
        """ UTCOffsetTZ constructor """
        self._hour_offset = hour_offset
        super(UTCOffsetTZ, self).__init__()

    def utcoffset(self, dt):
        """ Return offset of local time from UTC, in minutes east of UTC """
        return timedelta(hours=self._hour_offset)

    def dst(self, dt):
        """ Return the daylight saving time (DST) adjustment, in minutes east
        of UTC, or None if DST information isn't known
        """
        return timedelta(0)

    def tzname(self, dt):
        """ Return the time zone name represented in UTC hour-offset format as
        'UTC+/-offset'
        """
        if self._hour_offset > 0:
            tzname = "UTC+%02d:00" % self._hour_offset
        elif self._hour_offset < 0:
            tzname = "UTC-%02d:00" % self._hour_offset
        else:  # hour_offset = 0
            tzname = "UTC"

        return tzname


def satime_to_readable_datetime(sa_time, format_str=None):
    """ Convert the given SaTimeT time value to readable datetime string
    representation in ISO 8601 format

    Args:
        sa_time (SaTimeT): SaTimeT time value
        format_str (str): Format string for datetime output representation

    Returns:
        str: Datetime representation in format specified by format_str, or in
             ISO 8601 format 'YYYY-MM-DDTHH:MM:SS' if format_str not provided
    """
    time_sec = sa_time / 10**9  # Convert the time from nsec to sec 1000000000

    # Calculate the UTC offset for time zone information
    naive_dt = datetime.fromtimestamp(time_sec)
    utc_offset = (naive_dt - datetime.utcfromtimestamp(time_sec))
    hour_offset = utc_offset.total_seconds() // 3600
    utc_offset_tz = UTCOffsetTZ(hour_offset)

    aware_dt = naive_dt.replace(tzinfo=utc_offset_tz)

    if format_str is not None:
        return aware_dt.strftime(format_str)

    return aware_dt.isoformat(' ')


def _validate_ntf_class_id(arg):
    """ Validate the NtfClassId filter argument with format
    'VENDOR_ID.MAJOR_ID.MINOR_ID'

    Args:
        arg (str): The NtfClassId to validate

    Returns:
        SaNtfClassIdT: The validated NtfClassId
    """
    if arg.count('.') != 2:
        msg = "%r is not in correct format " \
              "'VENDOR_ID.MAJOR_ID.MINOR_ID'" % arg
        raise argparse.ArgumentTypeError(msg)
    if not arg.split('.')[0] or not arg.split('.')[1] \
            or not arg.split('.')[2]:
        msg = "%r does not have enough required values" % arg
        raise argparse.ArgumentTypeError(msg)

    # Validate element type
    try:
        vendor_id = int(arg.split('.')[0])
        major_id = int(arg.split('.')[1])
        minor_id = int(arg.split('.')[2])
    except ValueError:
        msg = "%r must consist of all integers" % arg
        raise argparse.ArgumentTypeError(msg)

    return saNtf.SaNtfClassIdT(vendor_id, major_id, minor_id)


def print_notification_header(notif_info):
    """ Print information of the header in the received notification

    Args:
        notif_info (NotificationInfo): NotificationInfo structure containing
            information of the notification header
    """
    dt_format_str = "%c %Z"
    print ('notificationId = %d\n'
           'eventType = %s\n'
           'notificationObject = "%s"\n'
           'notifyingObject = "%s"\n'
           'notificationClassId = %d.%d.%d\n'
           'eventTime = %d (%s)\n'
           'additionalText = "%s"' %
           (notif_info.notification_id,
            saNtf.eSaNtfEventTypeT.whatis(notif_info.event_type),
            notif_info.notification_object,
            notif_info.notifying_object,
            notif_info.ntf_class_id.vendorId,
            notif_info.ntf_class_id.majorId,
            notif_info.ntf_class_id.minorId,
            notif_info.event_time,
            satime_to_readable_datetime(notif_info.event_time, dt_format_str),
            notif_info.additional_text))
    if notif_info.additional_info:
        print("numAdditionalInfo = %d" % len(notif_info.additional_info))
        for add_info in notif_info.additional_info:
            print ("- Info ID: %d\n"
                   "  Info Type: %s (%d)\n"
                   "  Info Value: %s" %
                   (add_info.info_id,
                    saNtf.eSaNtfValueTypeT.whatis(add_info.info_type),
                    add_info.info_type,
                    add_info.info_value))
    print()


def print_object_create_delete_notification(notification):
    """ Print information of the received object create/delete notification

    Args:
        notification (NotificationInfo): NotificationInfo structure containing
            information of the received object create/delete notification
    """
    print("===  %s - Object Create/Delete  ===" %
          satime_to_readable_datetime(notification.event_time))
    print_notification_header(notification)
    print("sourceIndicator = %s" %
          saNtf.eSaNtfSourceIndicatorT.whatis(notification.source_indicator))
    print("numAttributes = %d" % len(notification.object_attributes))
    for obj_attr in notification.object_attributes:
        print("- Attribute ID: %d\n"
              "  Attribute Type: %s (%d)\n"
              "  Attribute Value: %s" %
              (obj_attr.attribute_id,
               saNtf.eSaNtfValueTypeT.whatis(obj_attr.attribute_type),
               obj_attr.attribute_type, obj_attr.attribute_value))


def print_attribute_change_notification(notification):
    """ Print information of the received attribute change notification

    Args:
        notification (NotificationInfo): NotificationInfo structure containing
            information of the received attribute change notification
    """
    print("===  %s - Attribute Change  ===" %
          satime_to_readable_datetime(notification.event_time))
    print_notification_header(notification)
    print("sourceIndicator = %s" %
          saNtf.eSaNtfSourceIndicatorT.whatis(notification.source_indicator))
    print("numAttributes = %d" % len(notification.changed_attributes))
    for changed_attr in notification.changed_attributes:
        print("- Attribute ID: %d\n"
              "  Attribute Type: %s (%d)\n"
              "  Old Attribute Present: %s\n"
              "  New Attribute Value: %s" %
              (changed_attr.attribute_id,
               saNtf.eSaNtfValueTypeT.whatis(changed_attr.attribute_type),
               changed_attr.attribute_type,
               bool(changed_attr.old_attribute_present),
               changed_attr.new_attribute_value))
        if changed_attr.old_attribute_present:
            print("  Old Attribute Value: %s" %
                  changed_attr.old_attribute_value)


def print_state_change_notification(notification):
    """ Print information of the received state change notification

    Args:
        notification (NotificationInfo): NotificationInfo structure containing
            information of the received state change notification
    """
    print("===  %s - State Change  ===" %
          satime_to_readable_datetime(notification.event_time))
    print_notification_header(notification)
    print("sourceIndicator = %s" %
          saNtf.eSaNtfSourceIndicatorT.whatis(notification.source_indicator))
    print("numStateChanges = %d" % len(notification.state_changes))
    for changed_state in notification.state_changes:
        print("- State ID: %d\n"
              "  Old State Present: %s\n"
              "  New State: %s" %
              (changed_state.state_id, bool(changed_state.old_state_present),
               changed_state.new_state))
        if changed_state.old_state_present:
            print("  Old State: %s" % changed_state.old_state)


def print_alarm_notification(notification):
    """ Print information of the received alarm notification

    Args:
        notification (NotificationInfo): NotificationInfo structure containing
            information of the received alarm notification
    """
    print("===  %s - Alarm  ===" %
          satime_to_readable_datetime(notification.event_time))
    print_notification_header(notification)
    print("probableCause = %s" %
          saNtf.eSaNtfProbableCauseT.whatis(notification.probable_cause))
    print("perceivedSeverity = %s" %
          saNtf.eSaNtfSeverityT.whatis(notification.perceived_severity))

    if args.verbose:
        print("trend = %s" %
              saNtf.eSaNtfSeverityTrendT.whatis(notification.trend))
        print("thresholdInformation:\n"
              "- Threshold ID: %d\n"
              "  Threshold Value Type: %s (%d)\n"
              "  Threshold Value: %s\n"
              "  Threshold Hysteresis: %s\n"
              "  Observed Value: %s\n"
              "  Arm Time: %s" %
              (notification.threshold_information.threshold_id,
               saNtf.eSaNtfValueTypeT.whatis(
                   notification.threshold_information.threshold_value_type),
               notification.threshold_information.threshold_value_type,
               notification.threshold_information.threshold_value,
               notification.threshold_information.threshold_hysteresis,
               notification.threshold_information.observed_value,
               satime_to_readable_datetime(
                   notification.threshold_information.arm_time)))
        print("numSpecificProblems = %d" % len(notification.specific_problems))
        for spec_problem in notification.specific_problems:
            print("- Problem ID: %d\n"
                  "  Problem Class ID: %d.%d.%d\n"
                  "  Problem Type: %s (%d)\n"
                  "  Problem Value: %s" %
                  (spec_problem.problem_id,
                   spec_problem.problem_class_id.vendorId,
                   spec_problem.problem_class_id.majorId,
                   spec_problem.problem_class_id.minorId,
                   saNtf.eSaNtfValueTypeT.whatis(spec_problem.problem_type),
                   spec_problem.problem_type, spec_problem.problem_value))
        print("numMonitoredAttributes = %d" %
              len(notification.monitored_attrs))
        for monitored_attr in notification.monitored_attrs:
            print("- Attribute ID: %d\n"
                  "  Attribute Type: %s (%d)\n"
                  "  Attribute Value: %s" %
                  (monitored_attr.attribute_id,
                   saNtf.eSaNtfValueTypeT.whatis(
                       monitored_attr.attribute_type),
                   monitored_attr.attribute_type,
                   monitored_attr.attribute_value))
        print("numProposedRepairActions = %d" %
              len(notification.proposed_repair_actions))
        for repair_action in notification.proposed_repair_actions:
            print("- Action ID: %d\n"
                  "  Action Value Type: %s (%d)\n"
                  "  Action Value: %s" %
                  (repair_action.action_id,
                   saNtf.eSaNtfValueTypeT.whatis(
                       repair_action.action_value_type),
                   repair_action.action_value_type,
                   repair_action.action_value))


def print_security_alarm_notification(notification):
    """ Print information of the received security alarm notification

    Args:
        notification (NotificationInfo): NotificationInfo structure containing
            information of the received security alarm notification
    """
    print("===  %s - Security Alarm  ===" %
          satime_to_readable_datetime(notification.event_time))
    print_notification_header(notification)
    print("probableCause = %s\n"
          "severity = %s\n"
          "Security Alarm Detector Type: %s (%d)\n"
          "Security Alarm Detector Value: %s\n"
          "Service User Type: %s (%d)\n"
          "Service User Value: %s\n"
          "Service Provider Type: %s (%d)\n"
          "Service Provider Value: %s" %
          (saNtf.eSaNtfProbableCauseT.whatis(notification.probable_cause),
           saNtf.eSaNtfSeverityT.whatis(notification.severity),
           saNtf.eSaNtfValueTypeT.whatis(
               notification.security_alarm_detector.value_type),
           notification.security_alarm_detector.value_type,
           notification.security_alarm_detector.value,
           saNtf.eSaNtfValueTypeT.whatis(notification.service_user.value_type),
           notification.service_user.value_type,
           notification.service_user.value,
           saNtf.eSaNtfValueTypeT.whatis(
               notification.service_provider.value_type),
           notification.service_provider.value_type,
           notification.service_provider.value))


def print_received_notification(subscription_id, notif_type, notif_info):
    """ Test callback for subscribed notifications, which simply prints
    information of every received notification

    Args:
        subscription_id (SaNtfSubscriptionIdT): The subscription id previously
            provided by the subscriber when subscribing for this type of
            notification
        notif_type (SaNtfNotificationTypeT): Type of the received notification
        notif_info (NotificationInfo): NotificationInfo structure containing
            information of the received notification
    """
    print("\nSubscription ID: %d" % subscription_id)
    if notif_type == \
            saNtf.eSaNtfNotificationTypeT.SA_NTF_TYPE_OBJECT_CREATE_DELETE:
        print_object_create_delete_notification(notif_info)
    elif notif_type == \
            saNtf.eSaNtfNotificationTypeT.SA_NTF_TYPE_ATTRIBUTE_CHANGE:
        print_attribute_change_notification(notif_info)
    elif notif_type == saNtf.eSaNtfNotificationTypeT.SA_NTF_TYPE_STATE_CHANGE:
        print_state_change_notification(notif_info)
    elif notif_type == saNtf.eSaNtfNotificationTypeT.SA_NTF_TYPE_ALARM:
        print_alarm_notification(notif_info)
    elif notif_type == \
            saNtf.eSaNtfNotificationTypeT.SA_NTF_TYPE_SECURITY_ALARM:
        print_security_alarm_notification(notif_info)
    print()


# Define command line arguments for ntfsubscribe
parser = argparse.ArgumentParser(
    usage='%(prog)s [options]',
    description='A SAF NTF client used to subscribe for incoming '
                'notifications matching optionally provided filter '
                'argument(s).\nIf not specified, all types of notification '
                'will be subscribed to by default.',
    formatter_class=argparse.RawTextHelpFormatter)
parser.add_argument('-i', '--subscriptionId', metavar='ID', type=int,
                    default=1, help='id for the notification subscription')
parser.add_argument('-t', '--timeout', metavar='TIME', type=int,
                    help='timeout (sec) to wait for notification')
parser.add_argument('-v', '--verbose', action='store_true',
                    help='print all information from alarm notifications')
parser.add_argument('-o', '--objectCreateDelete', action='store_true',
                    help='subscribe for objectCreateDelete notifications only')
parser.add_argument('-c', '--attributeChange', action='store_true',
                    help='subscribe for attributeChange notifications only')
parser.add_argument('-s', '--stateChange', action='store_true',
                    help='subscribe for stateChange notifications only')
parser.add_argument('-a', '--alarm', action='store_true',
                    help='subscribe for alarm notifications only')
parser.add_argument('-y', '--securityAlarm', action='store_true',
                    help='subscribe for securityAlarm notifications only')
parser.add_argument('-e', '--eventTypes', metavar='4096-20485',
                    type=int, nargs='+',
                    choices=sorted(saNtf.eSaNtfEventTypeT.reverse_lookup)[:22],
                    help='numeric value of SaNtfEventTypeT\n'
                         '(SA_NTF_OBJECT_NOTIFICATIONS_START to '
                         'SA_NTF_TIME_VIOLATION)')
parser.add_argument('-C', '--notificationClassIds',
                    type=_validate_ntf_class_id,
                    metavar='VENDOR_ID.MAJOR_ID.MINOR_ID', nargs='+',
                    help='notification class identifier\n'
                         'VENDOR_ID: SaUint32T integer value\n'
                         'MAJOR_ID: SaUint16T integer value\n'
                         'MINOR_ID: SaUint16T integer value')
parser.add_argument('-n', '--notificationObjects', metavar='NOTIFICATION_OBJ',
                    type=str, nargs='+',
                    help='notification object (string value)')
parser.add_argument('-N', '--notifyingObjects', metavar='NOTIFYING_OBJ',
                    type=str, nargs='+',
                    help='notifying object (string value)')
parser.add_argument('-I', '--sourceIndicators', metavar='1-3',
                    type=int, nargs='+', choices=range(1, 4),
                    help='numeric value of SaNtfSourceIndicatorT\n'
                         '(SA_NTF_OBJECT_OPERATION to '
                         'SA_NTF_UNKNOWN_OPERATION)')
parser.add_argument('--changedStateIds', metavar='STATE_ID',
                    type=int, nargs='+',
                    help='changed state id of StateChange notification')
parser.add_argument('-p', '--probableCauses', metavar='0-74',
                    type=int, nargs='+', choices=range(75),
                    help='numeric value of SaNtfProbableCauseT\n'
                         '(SA_NTF_ADAPTER_ERROR to SA_NTF_UNSPECIFIED_REASON)')
parser.add_argument('-r', '--perceivedSeverities', metavar='0-5', type=int,
                    nargs='+', choices=range(6),
                    help='numeric value of alarm SaNtfSeverityT\n'
                         '(clear=0,ind,warn,min,maj,critical=5)')
parser.add_argument('-T', '--trends', metavar='0-2', type=int,
                    nargs='+', choices=range(3),
                    help='numeric value of SaNtfSeverityTrendT')
parser.add_argument('-S', '--severities', metavar='0-5', type=int,
                    nargs='+', choices=range(6),
                    help='numeric value of security alarm SaNtfSeverityT\n'
                         '(clear=0,ind,warn,min,maj,critical=5)')

# Parse command line arguments for user input, if any
# Default values will be used otherwise
args = parser.parse_args()

notif_type_subscriptions = []

if args.objectCreateDelete:
    notif_type_subscriptions.append(
        saNtf.eSaNtfNotificationTypeT.SA_NTF_TYPE_OBJECT_CREATE_DELETE)
if args.attributeChange:
    notif_type_subscriptions.append(
        saNtf.eSaNtfNotificationTypeT.SA_NTF_TYPE_ATTRIBUTE_CHANGE)
if args.stateChange:
    notif_type_subscriptions.append(
        saNtf.eSaNtfNotificationTypeT.SA_NTF_TYPE_STATE_CHANGE)
if args.alarm:
    notif_type_subscriptions.append(
        saNtf.eSaNtfNotificationTypeT.SA_NTF_TYPE_ALARM)
if args.securityAlarm:
    notif_type_subscriptions.append(
        saNtf.eSaNtfNotificationTypeT.SA_NTF_TYPE_SECURITY_ALARM)

# Initialize an NTF subscriber
subscriber = NtfSubscriber()
rc = subscriber.init(print_received_notification)
if rc != eSaAisErrorT.SA_AIS_OK:
    print("ERROR: saNtfInitialize FAILED, rc = %s\n" %
          eSaAisErrorT.whatis(rc))
    sys.exit(1)

# Set notification subscribe filter values, if any, provided by the users
if args.eventTypes is not None:
    subscriber.set_filter_event_types(args.eventTypes)
if args.notificationClassIds is not None:
    subscriber.set_filter_ntf_class_ids(args.notificationClassIds)
if args.notificationObjects is not None:
    subscriber.set_filter_notification_objects(args.notificationObjects)
if args.notifyingObjects is not None:
    subscriber.set_filter_notifying_objects(args.notifyingObjects)
if args.sourceIndicators is not None:
    subscriber.set_filter_source_indicators(args.sourceIndicators)
if args.changedStateIds is not None:
    state_changes = []
    for state_id in args.changedStateIds:
        state_changes.append(ntf.StateChange(state_id, 0, False, 0))
    subscriber.set_filter_changed_states(state_changes)
if args.probableCauses is not None:
    subscriber.set_filter_probable_causes(args.probableCauses)
if args.perceivedSeverities is not None:
    subscriber.set_filter_perceived_severities(args.perceivedSeverities)
if args.trends is not None:
    subscriber.set_filter_trends(args.trends)
if args.severities is not None:
    subscriber.set_filter_severities(args.severities)

# Subscribe for user-specified notification types or all types by default
if notif_type_subscriptions:
    rc = subscriber.subscribe(args.subscriptionId, notif_type_subscriptions)
    if rc != eSaAisErrorT.SA_AIS_OK:
        print("ERROR: saNtfNotificationSubscribe FAILED, rc = %s\n" %
              eSaAisErrorT.whatis(rc))
        sys.exit(1)
else:
    rc = subscriber.subscribe(args.subscriptionId)
    if rc != eSaAisErrorT.SA_AIS_OK:
        print("ERROR: saNtfNotificationSubscribe FAILED, rc = %s\n" %
              eSaAisErrorT.whatis(rc))
        sys.exit(1)

# Obtain the subscriber selection object to poll for incoming notifications
select_obj = subscriber.get_selection_object().value

# Poll forever for notifications unless a timeout is specified
while True:
    try:
        read_evt, _, _ = select.select([select_obj], [], [], args.timeout)
        if select_obj in read_evt:
            rc = subscriber.dispatch(eSaDispatchFlagsT.SA_DISPATCH_ALL)
            if rc != eSaAisErrorT.SA_AIS_OK:
                print("ERROR: saNtfDispatch FAILED, rc = %s\n" %
                      eSaAisErrorT.whatis(rc))
                sys.exit(1)
        elif not read_evt:
            print("Poll timeout!")
            sys.exit(1)
    except KeyboardInterrupt:
        sys.exit(0)
