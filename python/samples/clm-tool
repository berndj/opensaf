#!/usr/bin/env python
############################################################################
#
# (C) Copyright 2015 The OpenSAF Foundation
# (C) Copyright 2017 Ericsson AB. All rights reserved.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. This file and program are licensed
# under the GNU Lesser General Public License Version 2.1, February 1999.
# The complete license can be accessed from the following location:
# http://opensource.org/licenses/lgpl-license.php
# See the Copying file included with the OpenSAF distribution for full
# licensing terms.
#
# Author(s): Ericsson AB
#
############################################################################
"""
This is a SAF CLM utility which supports options to:
    - Retrieve information about one or all CLM cluster member nodes.
    - Track CLM cluster membership changes.
    - Run clm-tool --help/-h for more detail on usage.
"""
from __future__ import print_function
import argparse
import sys
from select import select

from pyosaf.saAis import saAis, eSaAisErrorT, eSaDispatchFlagsT
from pyosaf.utils import clm
from pyosaf.utils.immom.accessor import ImmOmAccessor


class ClmTool(object):
    """ This class provides functions of the clm-tool. """
    def __init__(self):
        self.clm_agent = clm.ClmAgent()
        self.clm_agent.init(self.membership_change)
        self.sel_obj = self.clm_agent.get_selection_object()

    def print_members(self):
        """ Print out the name and the IP address of all current member nodes.

        Returns:
            Boolean: True if cluster members info is printed successfully.
                Otherwise, it is False.

        """
        print("-" * 10 + " Members " + "-" * 10)
        rc, members = self.clm_agent.get_members()
        if rc != eSaAisErrorT.SA_AIS_OK:
            print("Failed to get current membership. rc:",
                  eSaAisErrorT.whatis(rc))
            return False
        else:
            for node in members:
                node_name = self.node_dn_to_node_name(node.node_name)
                ip_address = node.node_address_value
                print("  - %s  %s" % (node_name, ip_address))

        return True

    def request_node_info(self, node_dn, time_out):
        """ Request the information of a specific member node which is
        identified by its DN.

        Args:
            node_dn (str): The DN of SaClmNode class's object.
            time_out (int): Timeout in nanosecond.

        Returns:
            ClusterNode: Node info or None if node with `node_dn` is not found.
        """
        accessor = ImmOmAccessor()
        accessor.init()

        rc, clm_node_object = accessor.get(node_dn)
        if rc != eSaAisErrorT.SA_AIS_OK:
            print("%s object does not exist" % node_dn)
            return None

        node_id = clm_node_object["saClmNodeID"]
        rc, mem_node_info = self.clm_agent.get_node_info(node_id, time_out)
        if rc != eSaAisErrorT.SA_AIS_OK:
            print("Failed to request node info. rc:", eSaAisErrorT.whatis(rc))
            return None

        return mem_node_info

    def start_tracking(self, track_type):
        """ Start tracking member nodes.

        Args:
            track_type (SaUint8T): Type of cluster membership tracking

        Returns:
            Boolean: True if it starts tracking successfully. Otherwise, it is
                False.
        """
        rc = self.clm_agent.track_start(track_type)
        if rc != eSaAisErrorT.SA_AIS_OK:
            print("Failed to start tracking. rc:", eSaAisErrorT.whatis(rc))
            return False

        return True

    def stop_tracking(self):
        """ Stop tracking member nodes.

        Returns:
            Boolean: True if it stops tracking successfully. Otherwise, it is
                False.
        """
        rc = self.clm_agent.track_stop()
        if rc != eSaAisErrorT.SA_AIS_OK:
            print("Failed to stop tracking. rc:", eSaAisErrorT.whatis(rc))
            return False

        return True

    def dispatch(self, dispatch_flag):
        """ Dispatch message to appropriate callback.

        Args:
            dispatch_flag (eSaDispatchFlagsT): Flags specifying dispatch mode.

        Returns:
            Boolean: True if it dispatches message successfully. Otherwise, it
                is False.
        """
        rc = self.clm_agent.dispatch(dispatch_flag)
        if rc != eSaAisErrorT.SA_AIS_OK:
            print("Failed to dispatch message. rc:", eSaAisErrorT.whatis(rc))
            return False

        return True

    def finalize(self):
        """ Finalize the clm agent.

        Returns:
            Boolean: True if it clm agent finalizes successfully. Otherwise, it
                is False.
        """
        rc = self.clm_agent.finalize()
        if rc != eSaAisErrorT.SA_AIS_OK:
            print("Failed to finalize ClmAgent. rc:", eSaAisErrorT.whatis(rc))
            return False

        return True

    def membership_change(self, node_list, invocation, step,
                          num_of_members, error):
        """ Callback to handle membership change event.

        Args:
            node_list (tuple): A list of tuple which contain cluster node info
                and cluster node change type.
            invocation (SaInvocationT):  A particular invocation of the
                callback function.
            step (SaClmChangeStepT): Indicates the tracking step in which
                the callback is invoked.
            num_of_members (SaUint32T): The current number of members in the
                cluster membership.
            error (SaAisErrorT): indicates if the CLM was able to perform the
                requested operation.
        """

        print('-' * 10 + 'Membership Change' + '-' * 10)
        print("Changed nodes:")
        for node in node_list:
            self.print_node_info(node[0])
            print("\tNode change state:", node[1])
            print("\t" + "-" * 10)

        print("Invocation:", invocation)
        print("Step:", step)
        print("Number of members:", num_of_members)
        print("Error code:", eSaAisErrorT.whatis(error))

    @staticmethod
    def print_node_info(cluster_node):
        """ Print information of a cluster node.

        Args:
            cluster_node (ClusterNode): ClusterNode object which is printed.
        """
        print("\tNode ID:", cluster_node.node_id)
        print("\tNode Address:", cluster_node.node_address_value)
        print("\tNode Address Family:", cluster_node.node_address_family)
        print("\tNode Name:", cluster_node.node_name)
        print("\tExecution Environment:",
              'None' if cluster_node.execution_environment.length == 0
              else cluster_node.execution_environment.value)
        print("\tMember:", 'Yes' if cluster_node.member == 1 else 'No')
        print("\tBoot Timestamp:", cluster_node.boot_timestamp)
        print("\tView Number:", cluster_node.initial_view_number)

    @staticmethod
    def node_dn_to_node_name(node_dn):
        """ Convert from node's DN to node's name.

        Args:
            node_dn (str): DN of a SaClmNode object.

        Returns:
            str: Name of node.
        """
        return node_dn.split(',')[0].split('=')[1]


# Main
parser = argparse.ArgumentParser(description='This is a SAF CLM utility used '
                                             'to view/track CLM cluster '
                                             'membership.')
group = parser.add_mutually_exclusive_group(required=True)
group.add_argument('-s', '--show', action="store_true",
                   help='print info of all current cluster member nodes.')
group.add_argument('-n', '--nodeinfo', type=str,
                   help="print info of a specific cluster member node.")
group.add_argument('-t', '--track', action="store_true",
                   help='track changes in cluster membership.')

clm_tool = ClmTool()
result = True

args = parser.parse_args()
if args.show:
    result = clm_tool.print_members()
elif args.nodeinfo:
    node_info = clm_tool.request_node_info(args.nodeinfo, 6000000000)
    if node_info is not None:
        clm_tool.print_node_info(node_info)
    else:
        result = False
elif args.track:
    fds = [clm_tool.sel_obj.value]
    result = clm_tool.start_tracking(saAis.SA_TRACK_CHANGES)

    try:
        while result:
            ioe = select(fds, [], [])
            for fd in ioe[0]:
                if fd == clm_tool.sel_obj.value:
                    result = clm_tool.dispatch(
                        eSaDispatchFlagsT.SA_DISPATCH_ALL)
    except KeyboardInterrupt:
        clm_tool.stop_tracking()

clm_tool.finalize()
sys.exit(0 if result else 1)
