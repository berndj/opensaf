#!/usr/bin/env python
############################################################################
#
# (C) Copyright 2011 The OpenSAF Foundation
# (C) Copyright 2018 Ericsson AB. All rights reserved.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. This file and program are licensed
# under the GNU Lesser General Public License Version 2.1, February 1999.
# The complete license can be accessed from the following location:
# http://opensource.org/licenses/lgpl-license.php
# See the Copying file included with the OpenSAF distribution for full
# licensing terms.
#
# Author(s): Wind River Systems, Inc.
#            Ericsson AB
#
############################################################################
""" Sample illustrates the usage of admin operation """
from __future__ import print_function
import json
import sys
import argparse

from os import getpid
from socket import gethostname

from pyosaf import saImm
from pyosaf.utils import SafException
from pyosaf.saAis import eSaAisErrorT
from pyosaf.utils.immom.agent import ImmOmAgent


def get_execute_name():
    """ Get execute name """
    return ':'.join((gethostname(), sys.argv[0], str(getpid())))


def cast(value_type, value):
    """ Cast value to int, float or string type """
    if value_type in [saImm.eSaImmValueTypeT.SA_IMM_ATTR_SAUINT64T,
                      saImm.eSaImmValueTypeT.SA_IMM_ATTR_SAINT64T,
                      saImm.eSaImmValueTypeT.SA_IMM_ATTR_SAUINT32T,
                      saImm.eSaImmValueTypeT.SA_IMM_ATTR_SAINT32T]:
        return int(value)

    if value_type in [saImm.eSaImmValueTypeT.SA_IMM_ATTR_SADOUBLET,
                      saImm.eSaImmValueTypeT.SA_IMM_ATTR_SAFLOATT]:
        return float(value)

    return value


def immadm(args):
    """ Return admin operation information """
    dn = args.obj_dn
    op_id = int(args.op_id)
    params = args.params

    rc = eSaAisErrorT.SA_AIS_OK
    _params = []

    if params is not None:
        try:
            for param in params:
                (name, val_type, val) = param.split(':', 2)
                ptype = saImm.eSaImmValueTypeT.lookup[val_type]
                val = cast(ptype, val)
                _params.append(saImm.SaImmAdminOperationParamsT_2(
                    name, ptype, val))
            om_agent = ImmOmAgent()
            om_agent.init()
            rc = om_agent.invoke_admin_operation(dn, op_id, params=_params)
        except SafException as err:
            if err.value != eSaAisErrorT.SA_AIS_ERR_NOT_EXIST:
                raise err

    return {'dn': dn,
            'opId': op_id,
            'params': params,
            'rc': eSaAisErrorT.whatis(rc)}


if __name__ == '__main__':
    description = """
    Illustrates the usage of admin operation.

    Use like this:

    $ immadm -o 1 rdn=1

    $ immadm -o 1 -p param_name:SA_IMM_ATTR_SAUINT32T:1 rdn=1

    TYPE: one of:\n\t%s\n
    """ % '\n\t'.join(saImm.eSaImmValueTypeT.lookup.keys())

    parser = argparse.ArgumentParser(
        description=description,
        formatter_class=argparse.RawTextHelpFormatter)

    parser.add_argument('obj_dn', type=str, help='object DN')
    parser.add_argument('-o', '--op-id', help='operation id', dest='op_id',
                        required=True)
    parser.add_argument('-p', '--params', help='param of admin operation',
                        dest='params', action='append',
                        metavar='NAME:TYPE:VAL')
    parser.add_argument('-u', '--pretty-off', dest='ugly',
                        help='turn off pretty printing.',
                        action='store_true', default=False)

    arguments = parser.parse_args()

    result = immadm(arguments)

    print(json.dumps(result, indent=None if arguments.ugly else 4))
