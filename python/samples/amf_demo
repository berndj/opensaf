#!/usr/bin/env python
############################################################################
#
# (C) Copyright 2011 The OpenSAF Foundation
# (C) Copyright 2017 Ericsson AB. All rights reserved.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. This file and program are licensed
# under the GNU Lesser General Public License Version 2.1, February 1999.
# The complete license can be accessed from the following location:
# http://opensource.org/licenses/lgpl-license.php
# See the Copying file included with the OpenSAF distribution for full
# licensing terms.
#
# Author(s): Wind River Systems, Inc.
#            Ericsson AB
#
############################################################################
# pylint: disable=unused-argument
"""
This is a small demo which illustrates how to use AMF Python interfaces.
"""
import os
import sys
import errno
import signal
import socket
import hashlib
from select import select, error

from pyosaf.utils import log_info, log_err
from pyosaf.saAis import eSaAisErrorT, eSaDispatchFlagsT, SaNameT, SaVersionT
from pyosaf import saAmf

SA_AMF_CSI_ADD_ONE = saAmf.saAmf.SA_AMF_CSI_ADD_ONE
SA_AMF_CSI_TARGET_ONE = saAmf.saAmf.SA_AMF_CSI_TARGET_ONE
SA_AMF_CSI_TARGET_ALL = saAmf.saAmf.SA_AMF_CSI_TARGET_ALL


class AmfDemo(object):
    """ This class encapsulates functions provided by AMF. """
    ha_state_map = {1: 'ACTIVE',
                    2: 'STANDBY',
                    3: 'QUIESCED',
                    4: 'QUIESCING'}

    def __init__(self, health_check_key, signal_handler):
        self.handle = saAmf.SaAmfHandleT()
        self.version = SaVersionT('B', 4, 1)
        self.callbacks = saAmf.SaAmfCallbacksT_4()
        self.sel_obj = saAmf.SaSelectionObjectT()
        self.comp_name = SaNameT()
        self.health_check_key = saAmf.SaAmfHealthcheckKeyT(health_check_key)
        self.healthcheck_count = 1
        self.term_handler = signal_handler

    def initialize(self):
        """ Initialize with AMF service and register as AMF component. """
        self.callbacks.saAmfHealthcheckCallback = \
            saAmf.SaAmfHealthcheckCallbackT(self.health_check_callback)
        self.callbacks.saAmfComponentTerminateCallback = \
            saAmf.SaAmfComponentTerminateCallbackT(
                self.component_terminate_callback)
        self.callbacks.saAmfCSISetCallback = \
            saAmf.SaAmfCSISetCallbackT(self.csi_set_callback)
        self.callbacks.saAmfCSIRemoveCallback = \
            saAmf.SaAmfCSIRemoveCallbackT(self.csi_remove_callback)

        log_info("Start initialization.")

        rc = saAmf.saAmfInitialize_4(self.handle, self.callbacks, self.version)
        if not self.check_rc("saAmfInitialize", rc):
            return False

        rc = saAmf.saAmfSelectionObjectGet(self.handle, self.sel_obj)
        if not self.check_rc("saAmfSelectionObjectGet", rc):
            return False

        rc = saAmf.saAmfComponentNameGet(self.handle, self.comp_name)
        if not self.check_rc("saAmfComponentNameGet", rc):
            return False

        rc = saAmf.saAmfComponentRegister(self.handle, self.comp_name, None)
        if not self.check_rc("saAmfComponentRegister", rc):
            return False

        invocation_type = saAmf.eSaAmfHealthcheckInvocationT.\
            SA_AMF_HEALTHCHECK_AMF_INVOKED
        recovery_type = saAmf.eSaAmfRecommendedRecoveryT.\
            SA_AMF_COMPONENT_FAILOVER
        rc = saAmf.saAmfHealthcheckStart(self.handle, self.comp_name,
                                         self.health_check_key,
                                         invocation_type,
                                         recovery_type)
        if not self.check_rc("saAmfHealthcheckStart", rc):
            return False

        log_info("Initialization finished successfully.")
        return True

    def finalize(self):
        """ Finalize amf handle """
        rc = saAmf.saAmfFinalize(self.handle)
        return self.check_rc("saAmfFinalize", rc)

    def dispatch(self):
        """ Dispatch message to appropriate callback """
        rc = saAmf.saAmfDispatch(self.handle,
                                 eSaDispatchFlagsT.SA_DISPATCH_ALL)
        return self.check_rc("saAmfDispatch", rc)

    def health_check_callback(self, invocation, comp_name, health_check_key):
        """ Callback to handle health-check event.

        Args:
            invocation (SaInvocationT): A particular invocation of the
                callback function.
            comp_name (POINTER(SaNameT)): A pointer to the name of the
                component that must undergo the particular healthcheck.
            health_check_key (POINTER(SaAmfHealthcheckKeyT)): A pointer to the
                key of the healthcheck to be executed.
        """
        log_info("Health check callback is invoked [%s]" %
                 self.healthcheck_count)
        rc = saAmf.saAmfResponse_4(self.handle, invocation, None,
                                   eSaAisErrorT.SA_AIS_OK)
        self.check_rc("saAmfResponse_4", rc)
        self.healthcheck_count += 1

    def csi_set_callback(self, invocation, comp_name, ha_state, csi_desc):
        """ Callback to handle CSI set event.

         Args:
             invocation (SaInvocationT): A particular invocation of the
                callback function.
             comp_name (POINTER(SaNameT)): A pointer to the name of the
                component which CSI assigns to.
             ha_state (SaAmfHAStateT): The new HA state.
             csi_desc (SaAmfCSIDescriptorT): Information about the
                CSI targeted by this callback invocation.
         """
        log_info("CSI set callback is invoked")
        next_ha_state = AmfDemo.ha_state_map[ha_state]
        csi_name = csi_desc.csiName
        csi_flags = csi_desc.csiFlags

        if csi_flags in [SA_AMF_CSI_ADD_ONE, SA_AMF_CSI_TARGET_ONE]:
            log_info("%s got %s assignment for %s" %
                     (str(comp_name[0]), next_ha_state, str(csi_name)))
        elif csi_flags == SA_AMF_CSI_TARGET_ALL:
            log_info("%s got %s assignment for all CSI" %
                     (str(comp_name[0]), next_ha_state))

        if ha_state == saAmf.eSaAmfHAStateT.SA_AMF_HA_QUIESCING:
            rc = saAmf.saAmfCSIQuiescingComplete(self.handle, invocation,
                                                 eSaAisErrorT.SA_AIS_OK)
            self.check_rc("saAmfCSIQuiescingComplete", rc)

        rc = saAmf.saAmfResponse_4(self.handle, invocation, None,
                                   eSaAisErrorT.SA_AIS_OK)
        self.check_rc("saAmfResponse_4", rc)

    def csi_remove_callback(self, invocation, comp_name, csi_name, csi_flags):
        """ Callback to handle CSI remove event.

         Args:
             invocation (SaInvocationT): A particular invocation of the
                callback function.
             comp_name (POINTER(SaNameT)): A pointer to the name of the
                component which CSI will be remove.
             csi_name (POINTER(SaNameT)): A pointer to the name of the CSI
                which must be removed from component.
             csi_flags (SaAmfCSIFlagsT): The flag specifies whether one or more
                CSIs are affected.
         """
        log_info("CSI remove callback is invoked")
        if csi_flags == SA_AMF_CSI_TARGET_ONE:
            log_info("Removing assignment of %s from %s" %
                     (str(csi_name[0]), str(comp_name[0])))
        elif csi_flags == SA_AMF_CSI_TARGET_ALL:
            log_info("Removing ALL assignments from %s" % str(comp_name[0]))

        rc = saAmf.saAmfResponse_4(self.handle, invocation, None,
                                   eSaAisErrorT.SA_AIS_OK)
        self.check_rc("saAmfResponse_4", rc)

    def component_terminate_callback(self, invocation, comp_name):
        """ Callback to handle component terminate event.

         Args:
             invocation (SaInvocationT): A particular invocation of the
                callback function.
             comp_name (POINTER(SaNameT)):  A pointer to the name of the
                component to be terminated.
         """
        log_info("Component terminate callback is invoked")
        log_info("Component %s is terminating" % str(comp_name[0]))
        rc = saAmf.saAmfResponse_4(self.handle, invocation, None,
                                   eSaAisErrorT.SA_AIS_OK)
        self.check_rc("saAmfResponse_4", rc)
        self.term_handler.send_terminate_msg()

    @staticmethod
    def check_rc(function_name, rc):
        """ Check return code if it ok or not.

        Args:
            function_name (str): The name of the function.
            rc (eSaAisErrorT): Return code which is checked.

        Returns:
            bool: True if rc is SA_AIS_OK. Otherwise, it is False.
        """
        if rc != eSaAisErrorT.SA_AIS_OK:
            err_str = eSaAisErrorT.whatis(rc)
            log_err("%s FAILED, rc: %s" % (function_name, err_str))
            return False

        return True


class SignalHandler(object):
    """ Util class for signal handling """
    def __init__(self):
        self.term_socket = socket.socketpair()
        self.write_fd = self.term_socket[0].fileno()
        self.listen_fd = self.term_socket[1].fileno()
        signal.signal(signal.SIGTERM, self.handle_signal)
        signal.signal(signal.SIGINT, self.handle_signal)

    def handle_signal(self, signum, frame):
        """ Handle terminate or interrupt signal """
        if signum == signal.SIGINT:
            log_info("SIGINT is caught!")
        elif signum == signal.SIGTERM:
            log_info("SIGTERM is caught!")
            self.send_terminate_msg()

    def send_terminate_msg(self):
        os.write(self.write_fd, "Terminate request")


def create_pid_file(pid, comp_name):
    """ Create pid file which is handled by amf_demo_script.

    Args:
        pid (int): PID of the child process.
        comp_name(str): Component name which is specified by
            SA_AMF_COMPONENT_NAME environment variable.
    """
    md5 = hashlib.md5(comp_name + '\n').hexdigest()
    pid_file_path = "/tmp/%s.pid" % md5
    with open(pid_file_path, 'w') as md5_file:
        md5_file.write(str(pid))


def create_daemon(comp_name):
    """ Create a child process and detach it from main process.

    Args:
        comp_name (str): Component name which is specified by
            SA_AMF_COMPONENT_NAME environment variable.
    """
    pid = os.fork()
    if pid != 0:
        create_pid_file(pid, comp_name)
        sys.exit(0)


if __name__ == '__main__':
    env_comp_name = os.getenv("SA_AMF_COMPONENT_NAME")
    if env_comp_name is None:
        log_err("This process is not started by AMF. Exiting ...")
        sys.exit(1)

    create_daemon(env_comp_name)
    terminate_handler = SignalHandler()

    amf_demo = AmfDemo("AmfDemo", terminate_handler)
    result = amf_demo.initialize()
    if not result:
        sys.exit(1)

    fds = [amf_demo.sel_obj.value, amf_demo.term_handler.listen_fd]

    stop_flag = False
    while not stop_flag:
        try:
            ioe = select(fds, [], [])
        except error as err:
            if err[0] != errno.EINTR:
                log_err("Something went wrong: %r" % err)
                result = False
            continue

        for fd in ioe[0]:
            if fd == amf_demo.term_handler.listen_fd:
                stop_flag = True
            elif fd == amf_demo.sel_obj.value:
                result = amf_demo.dispatch()
                if not result:
                    stop_flag = True

    amf_demo.finalize()
    sys.exit(0 if result else 1)
