#!/usr/bin/env python
############################################################################
#
# (C) Copyright 2015 The OpenSAF Foundation
# (C) Copyright 2018 Ericsson AB. All rights reserved.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. This file and program are licensed
# under the GNU Lesser General Public License Version 2.1, February 1999.
# The complete license can be accessed from the following location:
# http://opensource.org/licenses/lgpl-license.php
# See the Copying file included with the OpenSAF distribution for full
# licensing terms.
#
# Author(s): Ericsson AB
#
############################################################################
# pylint: disable=invalid-name
""" Sample illustrates the admin operation handling in OI """
from __future__ import print_function
import argparse

from pyosaf.utils.immoi.implementer import Implementer, AdminOperationFunction
from pyosaf.utils.immom.object import ImmObject
from pyosaf.utils.immom.ccb import Ccb


class_name = "PingPong"
object_name = "pingPongId=1"


def print_admin_operation_info(dn, params):
    """ Print admin operation information """
    print("INFO: I am %s" % dn)

    if params:
        print("INFO: Received parameters")

        for param in params:
            print("\t- %s: %s (%s)" % (param.name, param.value, param.type))


def ping(dn, arguments):
    """ Ping """
    print("\nPing!\n")
    print_admin_operation_info(dn, arguments)


def pong(dn, arguments):
    """ Pong """
    print("\nPong!\n")
    print_admin_operation_info(dn, arguments)


if __name__ == '__main__':
    # Parse command line arguments
    description = """
    Logs and replies to admin operations 0 and 1 towards %s, and replies

    Use like this:

    $ ping-pong &

    $ immadm -o [0|1] pingPongId=1 <parameters..>
    """ % object_name
    parser = argparse.ArgumentParser(
        description=description,
        formatter_class=argparse.RawTextHelpFormatter)
    parser.parse_args()

    # Create the ping-pong instance if it doesn't exist
    ccb = Ccb(flags=None)
    obj = ImmObject(dn=object_name, class_name=class_name)
    setattr(obj, "pingPongId", object_name)
    ccb.init()
    ccb.create(obj=obj)
    ccb.apply()

    # Clear admin owner after apply CCB
    ccb.clear_admin_owner(obj_name=object_name)

    # Create the implementer instance
    operations = [AdminOperationFunction(class_name, 0, ping),
                  AdminOperationFunction(class_name, 1, pong)]
    implementer = Implementer(class_names=[class_name])
    implementer.set_admin_operations(operations)

    # Start dispatch and time update loop
    implementer.enter_dispatch_loop()
