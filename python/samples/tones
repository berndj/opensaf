#!/usr/bin/env python
############################################################################
#
# (C) Copyright 2015 The OpenSAF Foundation
# (C) Copyright 2018 Ericsson AB. All rights reserved.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. This file and program are licensed
# under the GNU Lesser General Public License Version 2.1, February 1999.
# The complete license can be accessed from the following location:
# http://opensource.org/licenses/lgpl-license.php
# See the Copying file included with the OpenSAF distribution for full
# licensing terms.
#
# Author(s): Ericsson AB
#
############################################################################
""" This is a Tones application give usage Implementer handle create object """
import argparse

from pyosaf.utils.immoi.implementer import Implementer, Constraints


tone_class_names = ["Do", "Re", "Mi", "Fa", "So", "La", "Ti"]


if __name__ == "__main__":
    # Parse command line arguments
    description = """
    Ensures that instances of %s can only be created in this order.

    Use like this:

    $ tones &

    $ immcfg -c Do doId=1                 (allowed)

    $ immcfg -c Re reId=1,doId=1          (allowed)

    $ immcfg -c Do doId=1,reId=1,doId=1   (not allowed)

    $ immcfg -c Mi miId=1                 (not allowed)
    """ % ', '.join(tone_class_names)

    parser = argparse.ArgumentParser(
        description=description,
        formatter_class=argparse.RawTextHelpFormatter)

    args = parser.parse_args()

    # Set up containment constraints
    constraints = Constraints()

    constraints.add_allowed_containment('Do', 'Re', upper=1)
    constraints.add_allowed_containment('Re', 'Mi', upper=1)
    constraints.add_allowed_containment('Mi', 'Fa', upper=1)
    constraints.add_allowed_containment('Fa', 'So', upper=1)
    constraints.add_allowed_containment('So', 'La', upper=1)
    constraints.add_allowed_containment('La', 'Ti', upper=1)

    # Create the implementer
    tones_implementer = Implementer(class_names=tone_class_names,
                                    name="TonesImplementer")

    tones_implementer.set_constraints(constraints)

    # Start the infinite dispatch loop
    tones_implementer.enter_dispatch_loop()
