#!/usr/bin/env python
############################################################################
#
# (C) Copyright 2015 The OpenSAF Foundation
# (C) Copyright 2018 Ericsson AB. All rights reserved.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. This file and program are licensed
# under the GNU Lesser General Public License Version 2.1, February 1999.
# The complete license can be accessed from the following location:
# http://opensource.org/licenses/lgpl-license.php
# See the Copying file included with the OpenSAF distribution for full
# licensing terms.
#
# Author(s): Ericsson AB
#
############################################################################
# pylint: disable=invalid-name
""" Sample illustrates the usage of Implementer by inheritance way """
import itertools
import argparse

from pyosaf.saAis import eSaAisErrorT
from pyosaf.utils import SafException
from pyosaf.utils.immoi.implementer import Implementer


class Caps(Implementer):
    """ The Caps implementer implements CapsSample and makes sure that
        the upperCaps and lowerCaps consist only of uppercase characters
        and lowercase characters respectively.
    """

    def __init__(self):
        """ Constructs the Caps instance """
        class_name = "CapsSample"
        Implementer.__init__(self, class_names=[class_name],
                             name="CapsImplementer")

    def on_validate(self, instances, updated, created, deleted):
        """ Validates that the rules for upperCaps and lowerCaps are kept """

        # Verify that upper and lower caps are correct in created objects
        # and updated objects
        for obj in itertools.chain(created, updated):

            # Verify upper caps
            if obj.upperCaps and not obj.upperCaps.isupper():
                err_str = "ERROR: %s.upperCaps must be upper case (was %s)" % \
                    (obj.dn, obj.upperCaps)
                raise SafException(eSaAisErrorT.SA_AIS_ERR_INVALID_PARAM,
                                   err_str)

            # Verify lower caps
            if obj.lowerCaps and not obj.lowerCaps.islower():
                err_str = "ERROR: %s.lowerCaps must be lower case (was %s)" % \
                          (obj.dn, obj.lowerCaps)
                raise SafException(eSaAisErrorT.SA_AIS_ERR_INVALID_PARAM,
                                   err_str)


if __name__ == "__main__":
    # Parse command line arguments
    description = """
    Validates that the lowerCaps and upperCaps attributes
    of instances of the CapsSample class can only contain
    lower case and upper case text respectively.

    Use like this:

    $ caps-inheritance-impl &

    $ immcfg -c CapsSample capsId=<RDN>

    $ immcfg -a upperCaps=ABC capsId=<RDN>  (allowed)

    $ immcfg -a lowerCaps=Abc capsId=<RDN>  (not allowed)
    """
    parser = argparse.ArgumentParser(
        description=description,
        formatter_class=argparse.RawTextHelpFormatter)

    parser.parse_args()

    # Create the implementer
    caps_implementer = Caps()

    # Start the infinite dispatch loop
    caps_implementer.enter_dispatch_loop()
