Before we can export Python API bindings, we must be able to express:
- simple, primitive data types that map effectively between C and Python;
- immutable constants and #define(s),
- complex, hetergenous types (structures, unions); and
- callbacks written in Python but invoked from the C library layer;


ctypes: new in Python version 2.5.
- a foreign function library for Python;
- provides C compatible data types;
- allows calling functions in DLLs or shared libraries; and
- it can be used to wrap DLLs and shared libraries in pure Python.


Expressing simple data types:

saAis.h included in all other header files.  Foundational types are
established within this header.  Export of Python bindings begins here.

Mapping of Types
SAF type	ctypes type	c type
----------------------------------------------------------------------
SaInt8T		c_char		char
SaInt16T	c_short		short
SaInt32T	c_int		int
SaInt64T	c_longlong	__int64 or long long
SaUint8T	c_ubyte		unsigned char
SaUint16T	c_ushort	unsigned short
SaUint32T	c_uint		unsigned int
SaUint64T	c_ulonglong	unsigned __int64 or unsigned long long
SaVoidPtr	c_void_p	void *

Types used by NTF/IMMS service
SaFloatT	c_float		float
SaDoubleT	c_double	double
SaStringT	c_char_p	char * (NUL terminated)

Additional types defined in terms of SAF types
All headers have instances of these.

SaTimeT			SaInt64T
SaInvocationT		SaUint64T
SaSizeT			SaUint64T
SaOffsetT		SaUint64T
SaSelectionObjectT	SaUint64T


Expressing C Constants and #define(s):
- Container class for defines and const located in saEnumConst.py
- Const class prevents unbinding or rebinding of const and defined values.
- Raises an exception if const or defined symbol unbound/rebound

From the python interpreter:
>>> from saAis import *
>>> print saAis.SA_TIME_ONE_MICROSECOND
1000
>>> saAis.SA_TIME_ONE_MICROSECOND = 1
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "saEnumConst.py", line 44, in __setattr__
    raise self.ConstError, 'Cannot rebind "%s"' % name
saEnumConst.ConstError: Cannot rebind "SA_TIME_ONE_MICROSECOND"


Expressing C Enumerations:
	SEnumT		SaInt32T
	Additionally, an Enumeration class is located in saEnumConst.py.

In C:
- enums permit declaration of constants with unique values;
- actual values can be provided for symbols if required.

The Enumeration class in samEnumConst.py simulates this behaviour.

Additionally, the Enumeration class:
- verifies all values are unique;
- permits reverse lookup, resolving numeric values to meaninful symbols;
- permits values to be referenced as attributes of an Enumeration class.

Example from saNtf.py:

SaNtfEventTypeT = SaEnumT
eSaNtfEventTypeT = Enumeration((
	('SA_NTF_OBJECT_NOTIFICATIONS_START',
	    eSaNtfNotificationTypeT.SA_NTF_TYPE_OBJECT_CREATE_DELETE),
	'SA_NTF_OBJECT_CREATION',
	'SA_NTF_OBJECT_DELETION',
...
))

>>> from saNtf import *
>>> print eSaNtfEventTypeT.SA_NTF_OBJECT_NOTIFICATIONS_START
4096
>>> print eSaNtfEventTypeT.SA_NTF_OBJECT_CREATION
4097
>>> print eSaNtfEventTypeT.whatis(4098)
SA_NTF_OBJECT_DELETION


Expressing C Structures and Unions:

- must derive from the Structure and Union base classes,defined in ctypes module;
- each subclass must define a _fields_ attribute;
- _fields_ must be a list of 2-tuples, containing a field name and a field type;
- structures can contain other structures by using a structure as a field type.

Examples from saAis.py:

class SaVersionT(Structure):
	_fields_ = [('releaseCode', SaInt8T),
		('majorVersion', SaUint8T),
		('minorVersion', SaUint8T)]

class SaLimitValueT(Union):
	_fields_ = [('int64Value', SaInt64T),
		('uint64Value', SaUint64T),
		('timeValue', SaTimeT),
		('floatValue', SaFloatT),
		('doubleValue', SaDoubleT)]


Expressing Callback Functions:
- ctypes permits creation of C callable function pointers from Python callables;
- class must be created for the callback function;
- class knows return type, and number and types of arguments to be received.

The CFUNCTYPE factory function creates types for callback functions

Example from saAmf.py:

Given the C definition of healthcheck callback:

typedef void
(*SaAmfHealthcheckCallbackT)(
    SaInvocationT invocation,
    const SaNameT *compName,
    SaAmfHealthcheckKeyT *healthcheckKey);

We can create a Python class encapsulating this information as part of the
bindings themselves:

SaAmfHealthcheckCallbackT = CFUNCTYPE(None,
	SaInvocationT, POINTER(SaNameT), POINTER(SaAmfHealthcheckKeyT))

This class definition in the bindings code permits client code to be written
as follows:

Define a Python function that conforms to this signature:

def healthcheckCback(invocation, compName, healthcheckKey):
	saAmfResponse(AmfIface.amfHandle, invocation, eSaAisErrorT.SA_AIS_OK)

Construct an instance of the class with the function as part of the callbacks:

callbacks = SaAmfCallbacksT()
callbacks.saAmfHealthcheckCallback = SaAmfHealthcheckCallbackT(healthcheckCback)


API Calls
Once the foundation has been established for representing simple data types,
complex (heterogenous) data types, and callbacks, we can start exporting the
Python API.

Primary objectives influencing design decisions:

1. API primarily intended to enable test framework; and
2. Make API as simple as possible to encourage additional uses.


Example from saImmOm.py:

def saImmOmClassDescriptionGet_2(immHandle,
		className, classCategory, attrDefinitions):
	"""
	SaImmHandleT immHandle
	SaImmClassNameT className
	SaImmClassCategoryT classCategory
	POINTER(POINTER(SaImmAttrDefinitionT_2))() attrDefinitions
	"""
	...

This API illustrates how the primary objectives may be at odds:

All IN parameters are passed by value (immHandle, className, classCategory):
Relieves user of responsibility for passing IN params by reference.  Satisfies
design consideration 2 - Make API as simple as possible.

Last parameter (OUT parameter) looks ugly, violates objective 2:
Must be declared this way to preserve "reference to a reference" for use with:

def saImmOmClassDescriptionMemoryFree_2(immHandle, attrDefinitions)
	SaImmHandleT immHandle
	POINTER(POINTER(SaImmAttrDefinitionT_2))() attrDefinitions
	...

Thereby adhering to objective 1: Design for primary intent (test framework)

If the "reference to a reference" was hidden within the abstraction, there would
be no handle available with which to test saImmOmClassDescriptionMemoryFree_2().


To make these necessarily difficult declarations more palatable, helper
functions are provided to handle them as opaquely as possible:

def unmarshalNullArray(c_array):
	"""Convert c array to Python list.
	"""
	...

This helper function returns a simple Python list of instances found in the
array (SaImmAttrDefinitionT_2 in this particular example).


Example of usage:

# omHandle initialized earlier.
# Error handling omitted for brevity.

className = SaImmClassNameT('MyClass')
classCategory = SaImmClassCategoryT()
attrDefs = POINTER(POINTER(SaImmAttrDefinitionT_2))()

saImmOmClassDescriptionGet_2(omHandle, className, classCategory, attrDefs)

for attr in unmarshalNullArray(attrDefs):
	print attr.attrName,\
		eSaImmValueTypeT.whatis(attr.attrValueType), attr.attrFlags,\
		unmarshalSaImmValue(attr.attrDefaultValue, attr.attrValueType)

saImmOmClassDescriptionMemoryFree_2(omHandle, attrDefs)


To run pylint use the following command:

make pylint (defaults to text)
make pylint FORMAT=html (note: no longer supported since pylint-1.7.x)
make pylint FORMAT=parseable
make pylint FORMAT=json
