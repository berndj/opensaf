# This file contains configuration for the SAF IMM service
# See the file osaf/services/saf/immsv/README for more configuration options.

# Uncomment the next line if you want to run immnd through valgrind
#export IMMNDTOOL="valgrind --leak-check=full --log-file=/tmp/immnd.valgrind"

# Uncomment the next line to enable trace
#args="--tracemask=0xffffffff"

# Uncomment the next line to enable trace for the imm-loader/sync
# and imm-pbe. When these are forked by the IMMND coordinator,
# they attach as IMMA clients. These processes will also route trace to the
# IMMND trace-file as define here. Traces are always stored in $PKGLOGDIR
# directory and the directory component of the path name (if any) is ignored.
#export IMMSV_TRACE_PATHNAME=osafimmnd

# The directory where the imm.xml files and persistend backend files are
# stored. Imm dump files may also be stored here or in a subdirectory.
# Normally this directory should reside on a replicated partition for 
# obtaining redundancy (HA).
#export IMMSV_ROOT_DIRECTORY=$pkglocalstatedir/immsv_store
export IMMSV_ROOT_DIRECTORY=$pkgsysconfdir

# The file name for the file that will be loaded by the immsv at first time 
# cluster start. If the configuration attribute SaImmRepositoryInitMode
# in the object "safRdn=immManagement,safApp=safImmService" has the value
# SA_IMM_INIT_FROM_FILE (2), then this is the file that will ALWAYS be
# used when the immsv is (re)started. Switching to a new version of this
# file should always be done by replacing this file (using this same name).
# To do this atomically it should be mv'ed to this name under 
# IMMSV_ROOT_DIRECTORY. The mv should be done within the file system 
# (otherwise it will be a cp which is not atomic).
export IMMSV_LOAD_FILE=imm.xml

# The file name to be used by the "internal repository", also called 
# persistent back-end. If the configuration attribute SaImmRepositoryInitMode
# has the value SA_IMM_KEEP_REPOSITORY (1), then IMMSV_LOAD_FILE will ONLY be
# used for first time cluster start. Subsequent restarts will try to load from
# the persistent back-end. The persistent back-end needs a file for storing
# committed CCBs and updates to persistent runtime attribute. 
# The IMMSV_PBE_FILE file is used for this. This file will also reside under
# the IMMSV_ROOT_DIRECTORY.
#export IMMSV_PBE_FILE=imm.db

# The PBE logic sometimes needs to regenerate the complete file representation
# of the imm database. This is needed when:
#      - The PBE is initially enabled.
#      - The PBE has been disabled temporarily and then enabled.
#      - The immsv has lost contact with the PBE during a too long period,
#        forcing it to abort some unresolved transactions in critical phase.
# The regeneration of the complete file representation is extra time consuming
# when performed on a replicated file system. It is much faster to generate the
# file on a tmp file system (ideally a ram-disk) and then to copy the file(s)
# to the replicated file system. If the IMMSV_PBE_TMP_DIR is defined, then
# this directory is where the temporary files aer generated. 
#        
#export IMMSV_PBE_TMP_DIR=/tmp

# Minimum number of nodes to expect, the imm-loading will wait for this
# number of nodes to join, before starting the loading. Straggler nodes
# will need to sync, which may prolong the startup of the clusterwide Immsv.
export IMMSV_NUM_NODES=5

# Maximum time in seconds to wait for the IMMSV_NUM_NODES. Loading will start
# before this time has expired if the requisite number of nodes have joined.
# If this time expires before the requisite number of nodes have joined, then
# loading will start anyway.
export IMMSV_MAX_WAIT=3

# Healthcheck keys
export IMMSV_ENV_HEALTHCHECK_KEY="Default"

# Uncomment the next line to enable info level logging
#args="--loglevel=info"

# Only log priority LOG_WARNING and higher to the system log file.
# All logging will be recorded in a new node local log file $PKGLOGDIR/osaf.log.
# Uncomment the next line to enable this service to log to OpenSAF node local log file.
# export OSAF_LOCAL_NODE_LOG=1

# THREAD_TRACE_BUFFER variable enables the tracing, writes the trace
# to thread based buffer in circular fashion. The trace buffers will
# be flushed to file if an abnormal end hits, i.e. LOG_ER is called
# export THREAD_TRACE_BUFFER=1

# The list of reserved table names. Each table is separated by a comma.
# Any attempt to create IMM object class with one of these names will
# get SA_AIS_ERR_INVALID_PARAM error code.
# The default list is used if this enviroment variable is not defined.
# export IMMSV_RESERVED_CLASS_NAMES="attr_def, attr_dflt, ccb_commits, classes,
#                                    objects, objects_blob_multi,
#                                    objects_int_multi, objects_real_multi,
#                                    objects_text_multi, pbe_rep_version";
