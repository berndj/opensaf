# This file contains configuration for the SAF IMM service
# See the file osaf/services/saf/immsv/README for more configuration options.

# Uncomment the next line if you want to run immd through valgrind
#export IMMDTOOL="valgrind --leak-check=full --log-file=/tmp/immd.valgrind"

# Uncomment the next line to enable trace
#args="--tracemask=0xffffffff"

# Uncomment the next line to enable info level logging
#args="--loglevel=info"

# Uncomment the next line to enable trace AND info level logging
#args="--tracemask=0xffffffff --loglevel=info"

# Healthcheck keys
export IMMSV_ENV_HEALTHCHECK_KEY="Default"

# If the PBE is to execute in redundant mode, that is 2 PBEs running in paralell
# at SCs and writing to separate files/filesystems, then at load time the first
# (i.e. active) IMMD needs to know how long it must wait for the peer SC/IMMD
# to join. Only when both SCs have joined can it be determined if the two
# PBE files are in sync and if not, which side has the latest data.
# The side with the latest (most up to date) data is chosen for loading by
# designating the IMMND at that SC as the coordinator. The IMMND coordinator
# performs the loading as usual.
# If IMMSV_2PBE_PEER_SC_MAX_WAIT expires, then loading will proceed with only
# one SC/PBE, with a risk that the IMM persistent state is actually re-wound. 
# Note: The same risk exists also with regular single PBE on top of a shared
# redundant file system. It is then instead the redundancy at the shared file
# system level (e.g. drbd) where the corresponding wait and possible re-wind
# can happen. Timeout is in units of seconds.
#export IMMSV_2PBE_PEER_SC_MAX_WAIT=30


# If the immsv is to allow absence of the IMMD service-id (indefinitely)
# then the config parameter below is to be commented in. Absent IMMD is
# part of the OpenSAF feature "Hydra" which has the goal of increasing
# OpenSAFs resilience in the face of both active and standby SC going down.
# Both SCs being absent implies that all OpenSAF director services are absent
# indefinitely, until an SC is re-established. Prior to the Hydra enhancement,
# departure of both SCs always resulted in a cluster restart. With the Hydra
# enhancement, payloads continue to provide reduced and limited service untill
# an SC-active is re-established. For the IMM service, Hydra is configured by
# commenting in the environment variable below.
# Support for absent IMMD is incompatible with 2PBE. If both are configured
# then 2PBE will win and the absence of IMMD feature will be ignored. An error
# message is printed in this case to the syslog at startup.
# Allowing absent immd is a configuration choice impacting all OpenSAF
# services, not just the immsv. If it is to be allowed then it is not
# sufficient to only configure the immsv for absent immd.
# The level of service that is provided during absent SC depends on the
# particular service. In the case of the IMM service, the service provided
# during IMMD absence is in essence only the reading of config data.
#export IMMSV_SC_ABSENCE_ALLOWED=900

# Amount of seconds IMMD waits for veteran IMMNDs after sc absence.
# If IMMD processes the intro messages from new IMMNDs before the intro
# messages from veteran IMMNDs, IMM service will start to load from file
# instead of syncing data from veteran nodes.
# This timeout is for preventing that from happening.
# Note that during a fresh cluster startup, IMMD also waits for veteran IMMNDs.
# Setting this value to large will slow down the cluster startup.
# This timeout only used with sc absence enabled. When sc absence is disabled,
# IMMD will not wait for the veteran IMMNDs.
# The default value (when the environment variable is not set) is 3 seconds.
#export IMMSV_SC_ABSENCE_VETERAN_MAX_WAIT=3

# Only log priority LOG_WARNING and higher to the system log file.
# All logging will be recorded in a new node local log file $PKGLOGDIR/osaf.log.
# Uncomment the next line to enable this service to log to OpenSAF node local log file.
# export OSAF_LOCAL_NODE_LOG=1

# THREAD_TRACE_BUFFER variable enables the tracing, writes the trace
# to thread based buffer in circular fashion. The trace buffers will
# be flushed to file if an abnormal end hits, i.e. LOG_ER is called
# export THREAD_TRACE_BUFFER=1
