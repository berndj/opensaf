# Following configuration is only valid when MDS transport is chosen as TCP.
# This file contains configuration for the DTM  service
# See the file osaf/services/infrastructure/dtm/README for more configuration options.

# Uncomment the next line if you want to run dtm through valgrind
#export DTMTOOL="valgrind --leak-check=full --log-file=/tmp/dtm.valgrind"

# Uncomment the next line to enable trace
#args="--tracemask=0xffffffff"

# Uncomment the next line to enable info level logging
#args="--loglevel=info"

# Only log priority LOG_WARNING and higher to the system log file.
# All logging will be recorded in a new node local log file $PKGLOGDIR/osaf.log.
# Uncomment the next line to enable this service to log to OpenSAF node local log file.
# export OSAF_LOCAL_NODE_LOG=1

# Healthcheck keys
export DTM_ENV_HEALTHCHECK_KEY="Default"

# Mandatory
DTM_CLUSTER_ID=1

#IP of the self node
# DTMSv
# Mandatory
DTM_NODE_IP=10.130.100.114

# IPv4/IPv6 multicast group address, or source of peer IP addresses for unicast
#
# Set DTM_MCAST_ADDR to a non-empty string to use multicast or unicast instead
# of broadcast.
#
# * To use multicast, specify an IPv4 or IPv6 multicast group address
# * To use unicast, the string should start with "file:" followed by the path
#   name of a file whose first line specifies the unique cluster name, followed
#   by a list of IP addresses (one per line), or start with "dns:" followed by a
#   DNS domain name, respectively. When using DNS, the domain name is used as
#   cluster name. Please ensure that the cluster name is unique, since it may be
#   used by OpenSAF to prevent accidental interconnection between clusters.
#
# Examples:
#DTM_MCAST_ADDR=224.0.0.1
#DTM_MCAST_ADDR=ff02::1
#DTM_MCAST_ADDR=file:/var/lib/peer_ip_addresses.txt
#DTM_MCAST_ADDR=dns:peers.opensaf.org
DTM_MCAST_ADDR=

# tcp_listening_port: The TCP port that the DTMSv listens on
# Mandatory
DTM_TCP_LISTENING_PORT=6700

#
# udp_bcast_snd_port: The UDP port that the DTMSv snds on
# Mandatory
DTM_UDP_BCAST_SND_PORT=6800

# udp_bcast_rcvr_port: The UDP port that the DTMSv listens on
# Mandatory
DTM_UDP_BCAST_REV_PORT=6900

#
# bcast_freq: frequencey (in milliseconds) between broadcasts during initial
# discovery
DTM_BCAST_FRE_MSECS=250

# cont_bcast_int: interval (in milliseconds) between broadcasts after initial
# discovery has completed
#DTM_CONTINUOUS_BCAST_INT=30000

# dtm_discovery_timeout_secs:  This is the time dtmc should be allowed to wait
# for a service script finish executing. If the service is not finished
# within this time dtmc will send a timeout message to DTMSv
# Mandatory
DTM_INI_DIS_TIMEOUT_SECS=5

#
# so_keepalive: Enable sending of keep-alive messages on connection-oriented
# sockets. Expects an integer boolean flag
# Note that without this set none of the tcp options will matter
DTM_SKEEPALIVE=1

#
# tcp_keepalive_time: The time (in seconds) the connection needs to remain
# idle before TCP starts sending keepalive probes
# Optional
DTM_TCP_KEEPIDLE_TIME=2

#
# tcp_keepalive_intvl: The time (in seconds) between individual keepalive
# probes.
# Optional
DTM_TCP_KEEPALIVE_INTVL=1

#
# tcp_keepalive_probes: The  maximum number of keepalive probes TCP should
# send before dropping the connection.
# Optional
DTM_TCP_KEEPALIVE_PROBES=2

#
# Since Linux kernel >= 2.6.37, TCP sockets have an option called TCP_USER_TIMEOUT
# Increasing the TCP_USER_TIMEOUT allows a TCP connection to survive extended
# periods without end-to-end connectivity.
# Decreasing the user timeouts allows applications to "fail fast" if so desired.
# Otherwise it may take upto 20 minutes with the current system
#  defaults in a normal WAN environment.
# This option, TCP_USER_TIMEOUT will override keepalive
# to determine when to close a connection due to keepalive failure.
# kept to 1.5 sec to match other transport protocols supported Opensaf
DTM_TCP_USER_TIMEOUT=1500

#
#Used to Set the dtm internode & intranode  socket SO_SNDBUF/SO_RCVBUF buffer in bytes.
#The kernel doubles this value (to allow space for bookkeeping over-head)
#when it is set using setsockopt(),and this doubled value is returned  by
#getsockopt(). The default value is set by the rmem_default/wmem_default
#sysctl and the maximum allowed value is set by the rmem_max/wmem_max sysctl.
#
# IMP NOTE : If DTM_SOCK_SND_RCV_BUF_SIZE  is configured according to application requirements ,
#it is also mandatory to  export `MDS_SOCK_SND_RCV_BUF_SIZE=` with  the same value of
#for example if set as DTM_SOCK_SND_RCV_BUF_SIZE=126976 need to do :
#export MDS_SOCK_SND_RCV_BUF_SIZE=126976
DTM_SOCK_SND_RCV_BUF_SIZE=65536

#
#The maximum processes allowed per node
#Used to Set the dtm intra node maximum allowed processes
DTM_INTRANODE_MAX_PROCESSES=100
